{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "`number-input` is an element that can:\n* prevent non numeric input\n* guarantee **live**-data to be valid\n* pad a value with `0` (to a specific length)\n* size the input (according to it's length)\n* overflow to minimum or underflow to maximum\n* saturate to minimum or to maximum\n* display a specified unit and size the input\n* specify the decimal separator (the value will still be a Number object)\n* use percent-format\n\nExample:\n```html\n<number-input step=\"2\" min=\"-20\" max=\"140\" pad-length=\"2\"></number-input>\n```\n\nIt sizes automatically. Use `key-up` and `key-down` to increment the value. If `step` is given, the value is a **multiple** of `step`.\n\n Have a look at [input-picker-pattern#input-shared-style](https://github.com/fooloomanzoo/input-picker-pattern#input-shared-style) to see how to style the element.\n\n```css\n number-input {\n  --input-disabled-color: grey;\n  --input-focus-background: rgba(0,0,0,0.3);\n  --input-focus: {\n    font-weight: bold;\n  };\n  --input-placeholder: {\n    color: pink;\n  };\n}\n```",
      "summary": "",
      "path": "number-input.html",
      "properties": [
        {
          "name": "locale",
          "type": "string | null | undefined",
          "description": "The current locale",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 32,
              "column": 10
            },
            "end": {
              "line": 35,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "decimalSeparator",
          "type": "string | null | undefined",
          "description": "locale separator for local decimal values",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 40,
              "column": 10
            },
            "end": {
              "line": 43,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "String"
            }
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "groupingSeparator",
          "type": "string | null | undefined",
          "description": "locale separator for grouping decimal values",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 48,
              "column": 10
            },
            "end": {
              "line": 51,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "String"
            }
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "minimumFractionDigits",
          "type": "number | null | undefined",
          "description": "minimum digits right to the decimal separator",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 102,
              "column": 10
            },
            "end": {
              "line": 105,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "maximumFractionDigits",
          "type": "number | null | undefined",
          "description": "The maximum number of fraction digits to use. Possible values are from 0 to 20; the default for plain number formatting is the larger of minimumFractionDigits and 3; the default for currency formatting is the larger of minimumFractionDigits and the number of minor unit digits provided by the ISO 4217 currency code list (2 if the list doesn't provide that information); the default for percent formatting is the larger of minimumFractionDigits and 0.",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 63,
              "column": 10
            },
            "end": {
              "line": 65,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "minimumIntegerDigits",
          "type": "number | null | undefined",
          "description": "minimum digits left to the decimal separator to pad",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 110,
              "column": 10
            },
            "end": {
              "line": 113,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "minimumSignificantDigits",
          "type": "number | null | undefined",
          "description": "The minimum number of significant digits to use. Possible values are from 1 to 21; the default is 1.",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 77,
              "column": 10
            },
            "end": {
              "line": 79,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "maximumSignificantDigits",
          "type": "number | null | undefined",
          "description": "The maximum number of significant digits to use. Possible values are from 1 to 21; the default is minimumSignificantDigits.",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 84,
              "column": 10
            },
            "end": {
              "line": 86,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "unit",
          "type": "string | null | undefined",
          "description": "unit of the output (only used when `number-style=\"decimal\"`)",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 91,
              "column": 10
            },
            "end": {
              "line": 93,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "unitSeparator",
          "type": "string | null | undefined",
          "description": "the separator to separate value and unit (default: '\\u202F')",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 98,
              "column": 10
            },
            "end": {
              "line": 101,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"â€¯\"",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "alwaysSign",
          "type": "boolean | null | undefined",
          "description": "always put the sign at the beginning",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 106,
              "column": 10
            },
            "end": {
              "line": 108,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "numberStyle",
          "type": "string | null | undefined",
          "description": "The formatting style to use. Possible values are \"decimal\" for plain number formatting, \"currency\" for currency formatting, and \"percent\" for percent formatting; the default is \"decimal\".\nnotice: min, max and step are not in percent (so e.g. if step is 0.01, it means that the step is 1%)",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 114,
              "column": 10
            },
            "end": {
              "line": 117,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"decimal\"",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "useGrouping",
          "type": "boolean | null | undefined",
          "description": "if true the number will be grouped according to the locale.",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 122,
              "column": 10
            },
            "end": {
              "line": 124,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "currency",
          "type": "string | null | undefined",
          "description": "The currency to use in currency formatting. Possible values are the ISO 4217 currency codes, such as \"USD\" for the US dollar, \"EUR\" for the euro, or \"CNY\" for the Chinese RMB â€” see http://www.currency-iso.org/en/home/tables/table-a1.html. There is no default value; if the style is \"currency\", the currency property must be provided.",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 129,
              "column": 10
            },
            "end": {
              "line": 131,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "currencyDisplay",
          "type": "string | null | undefined",
          "description": "How to display the currency in currency formatting. Possible values are \"symbol\" to use a localized currency symbol such as â‚¬, \"code\" to use the ISO currency code, \"name\" to use a localized currency name such as \"dollar\"; the default is \"symbol\".",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 136,
              "column": 10
            },
            "end": {
              "line": 138,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "_numberOptions",
          "type": "number | null | undefined",
          "description": "number format options",
          "privacy": "protected",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 143,
              "column": 10
            },
            "end": {
              "line": 146,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "formatNumber",
          "type": "Function | null | undefined",
          "description": "number format function",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 151,
              "column": 10
            },
            "end": {
              "line": 155,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true,
              "attributeType": "Function"
            }
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "parseNumber",
          "type": "Function | null | undefined",
          "description": "function to parse the input",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 160,
              "column": 10
            },
            "end": {
              "line": 164,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true,
              "attributeType": "Function"
            }
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "min",
          "type": "number",
          "description": "minimal input",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 19,
              "column": 10
            },
            "end": {
              "line": 21,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "max",
          "type": "number",
          "description": "maximal input",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 26,
              "column": 10
            },
            "end": {
              "line": 28,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "step",
          "type": "number",
          "description": "step for changing the input (referencing to `min` or `0`)",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 34,
              "column": 10
            },
            "end": {
              "line": 37,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_stepChanged\"",
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "startAt",
          "type": "number",
          "description": "start where to increment the value",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 43,
              "column": 10
            },
            "end": {
              "line": 45,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "valueAsNumber",
          "type": "number",
          "description": "value of the input",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 50,
              "column": 10
            },
            "end": {
              "line": 54,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_valueAsNumberChanged\"",
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "default",
          "type": "Object | null | undefined",
          "description": "default value of the value, when it does not validate",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 70,
              "column": 10
            },
            "end": {
              "line": 73,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_defaultChanged\"",
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "saturate",
          "type": "boolean",
          "description": "if true, the value does not revolve the range according to the maximum or the minimum",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 67,
              "column": 10
            },
            "end": {
              "line": 70,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_updateValueAsNumber\"",
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "useNegativeZero",
          "type": "boolean",
          "description": "if true, the value will break on 0 to -0",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 75,
              "column": 10
            },
            "end": {
              "line": 78,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_updateValueAsNumber\"",
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "noClamp",
          "type": "boolean",
          "description": "if true, the value does not clamp according to the given step",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 83,
              "column": 10
            },
            "end": {
              "line": 86,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_updateValueAsNumber\"",
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "name",
          "type": "string | null | undefined",
          "description": "name of the input",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 38,
              "column": 10
            },
            "end": {
              "line": 40,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "title",
          "type": "string | null | undefined",
          "description": "description for the element and can be used as a hint for invalid values",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 45,
              "column": 10
            },
            "end": {
              "line": 48,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "propertyForValue",
          "type": "string | null | undefined",
          "description": "defines the property that should be used for the value",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 123,
              "column": 10
            },
            "end": {
              "line": 126,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"valueAsNumber\"",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "value",
          "type": "number | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 115,
              "column": 10
            },
            "end": {
              "line": 118,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "disabled",
          "type": "boolean | null | undefined",
          "description": "disables the input",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 78,
              "column": 10
            },
            "end": {
              "line": 82,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "invalid",
          "type": "boolean | null | undefined",
          "description": "required attribute",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 87,
              "column": 10
            },
            "end": {
              "line": 92,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "required",
          "type": "boolean | null | undefined",
          "description": "required attribute",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 97,
              "column": 10
            },
            "end": {
              "line": 102,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "valueIsSet",
          "type": "boolean | null | undefined",
          "description": "is true when the value is set",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 107,
              "column": 10
            },
            "end": {
              "line": 111,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_isSet",
          "type": "Function | null | undefined",
          "description": "defines whether the value is set",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 116,
              "column": 10
            },
            "end": {
              "line": 118,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Function"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_validate",
          "type": "Function | null | undefined",
          "description": "validates the value (when required)",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 123,
              "column": 10
            },
            "end": {
              "line": 125,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Function"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "type",
          "type": "string | null | undefined",
          "description": "type of the input",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 79,
              "column": 10
            },
            "end": {
              "line": 82,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "String"
            }
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "input",
          "type": "string | null | undefined",
          "description": "the immediate input string",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 136,
              "column": 10
            },
            "end": {
              "line": 140,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_inputChanged\"",
              "attributeType": "String"
            }
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "validationMessage",
          "type": "string | null | undefined",
          "description": "message to set on the input to show if the input does not validate",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 145,
              "column": 10
            },
            "end": {
              "line": 148,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"setCustomValidity\"",
              "attributeType": "String"
            }
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "placeholder",
          "type": "string | null | undefined",
          "description": "the placeholder string",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 153,
              "column": 10
            },
            "end": {
              "line": 155,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "minlength",
          "type": "number | null | undefined",
          "description": "the minlength of the input",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 160,
              "column": 10
            },
            "end": {
              "line": 162,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "autoResize",
          "type": "boolean | null | undefined",
          "description": "if true, the width will change when typing",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 167,
              "column": 10
            },
            "end": {
              "line": 170,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_debouncedResizeWidth\"",
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "_minlengthString",
          "type": "string | null | undefined",
          "description": "string that is used to compute the minimal width of the input",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 175,
              "column": 10
            },
            "end": {
              "line": 177,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "padLength",
          "type": "number | null | undefined",
          "description": "length to pad the string (with `0`) according to the total amount of numbers",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 87,
              "column": 10
            },
            "end": {
              "line": 89,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "autoPadding",
          "type": "boolean",
          "description": "enables auto padding",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 95,
              "column": 10
            },
            "end": {
              "line": 97,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "NumberInputMixin"
        }
      ],
      "methods": [
        {
          "name": "_localeChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 174,
              "column": 6
            },
            "end": {
              "line": 236,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "locale"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "_computeNumberOptions",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 238,
              "column": 6
            },
            "end": {
              "line": 281,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "minimumIntegerDigits"
            },
            {
              "name": "minimumFractionDigits"
            },
            {
              "name": "maximumFractionDigits"
            },
            {
              "name": "minimumSignificantDigits"
            },
            {
              "name": "maximumSignificantDigits"
            },
            {
              "name": "useGrouping"
            },
            {
              "name": "style"
            },
            {
              "name": "currency"
            },
            {
              "name": "currencyDisplay"
            }
          ],
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "_computeFormatNumber",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 283,
              "column": 6
            },
            "end": {
              "line": 310,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "locale"
            },
            {
              "name": "numberOptions"
            },
            {
              "name": "unit"
            },
            {
              "name": "unitSeparator"
            },
            {
              "name": "alwaysSign"
            }
          ],
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "_computeParseNumber",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 312,
              "column": 6
            },
            "end": {
              "line": 398,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "decimalSeparator"
            },
            {
              "name": "groupingSeparator"
            },
            {
              "name": "numberOptions"
            }
          ],
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "_minMaxChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 96,
              "column": 6
            },
            "end": {
              "line": 105,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "min"
            },
            {
              "name": "max"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "_valueAsNumberChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 185,
              "column": 6
            },
            "end": {
              "line": 192,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "valueAsNumber"
            },
            {
              "name": "oldValue"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_defaultChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 194,
              "column": 6
            },
            "end": {
              "line": 199,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "def"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_computeDefaultValue",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 201,
              "column": 6
            },
            "end": {
              "line": 206,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_checkValueAsNumber",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 136,
              "column": 6
            },
            "end": {
              "line": 161,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            },
            {
              "name": "oldValue"
            }
          ],
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "_updateValueAsNumber",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 163,
              "column": 6
            },
            "end": {
              "line": 168,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "_checkStep",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 170,
              "column": 6
            },
            "end": {
              "line": 187,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            },
            {
              "name": "step"
            }
          ],
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "_safeMult",
          "description": "Emulating handwritten multiplication to keep precision",
          "privacy": "protected",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 195,
              "column": 6
            },
            "end": {
              "line": 197,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "a",
              "type": "?number",
              "description": "First summand"
            },
            {
              "name": "b",
              "type": "?number",
              "description": "Second summand"
            }
          ],
          "return": {
            "type": "number",
            "desc": "Sum"
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "_safeAdd",
          "description": "Emulating handwritten addition to keep precision",
          "privacy": "protected",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 205,
              "column": 6
            },
            "end": {
              "line": 207,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "a",
              "type": "?number",
              "description": "First factor"
            },
            {
              "name": "b",
              "type": "?number",
              "description": "Second factor"
            }
          ],
          "return": {
            "type": "number",
            "desc": "Product"
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "_stepChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 209,
              "column": 6
            },
            "end": {
              "line": 217,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "step"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "increase",
          "description": "Increase value by step",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 222,
              "column": 6
            },
            "end": {
              "line": 224,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "decrease",
          "description": "Decrease value by step",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 229,
              "column": 6
            },
            "end": {
              "line": 231,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "_increm",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 233,
              "column": 6
            },
            "end": {
              "line": 265,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "step"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "_shouldPropertyChange",
          "description": "overwritten of polymer to handle -0",
          "privacy": "protected",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 270,
              "column": 6
            },
            "end": {
              "line": 276,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property"
            },
            {
              "name": "value"
            },
            {
              "name": "old"
            }
          ],
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "_attachDom",
          "description": "attach dom with `delegatesFocus: true` so that the element is also focussed while its's children are too, and to autofocus to first tabable",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 22,
              "column": 6
            },
            "end": {
              "line": 31,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dom"
            }
          ],
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 188,
              "column": 6
            },
            "end": {
              "line": 194,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "_defaultIsSet",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 147,
              "column": 6
            },
            "end": {
              "line": 149,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "Object",
              "description": "value to test"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "true, if the value is set"
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_defaultValidate",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 159,
              "column": 6
            },
            "end": {
              "line": 161,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "isSet",
              "type": "Function",
              "description": "The function that defines if the value is set"
            },
            {
              "name": "value",
              "type": "Object",
              "description": "value to validate"
            },
            {
              "name": "required",
              "type": "Boolean",
              "description": "if true, the value is required"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "true, if the value is valid"
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_computeInvalid",
          "description": "defines whether the value is set",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 170,
              "column": 6
            },
            "end": {
              "line": 172,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "validate"
            },
            {
              "name": "isSet"
            },
            {
              "name": "value"
            },
            {
              "name": "required"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_computeValueIsSet",
          "description": "defines whether the value is set",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 179,
              "column": 6
            },
            "end": {
              "line": 181,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "isSet"
            },
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_valueChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 171,
              "column": 6
            },
            "end": {
              "line": 183,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            },
            {
              "name": "oldValue"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_createReflectPropertyToValueObserver",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 200,
              "column": 6
            },
            "end": {
              "line": 210,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "prop"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_reflectPropertyToValue",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 212,
              "column": 6
            },
            "end": {
              "line": 214,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_reflectValueToProperty",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 216,
              "column": 6
            },
            "end": {
              "line": 218,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "validate",
          "description": "validates the input for iron-form",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 364,
              "column": 6
            },
            "end": {
              "line": 367,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "reset",
          "description": "reset the value",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 211,
              "column": 6
            },
            "end": {
              "line": 213,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "disconnectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 196,
              "column": 6
            },
            "end": {
              "line": 199,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "_delayedAddEventListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 201,
              "column": 6
            },
            "end": {
              "line": 216,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "_addEventListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 218,
              "column": 6
            },
            "end": {
              "line": 225,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "_removeEventListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 227,
              "column": 6
            },
            "end": {
              "line": 234,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "_checkKeycode",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 140,
              "column": 6
            },
            "end": {
              "line": 155,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_inputChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 157,
              "column": 6
            },
            "end": {
              "line": 169,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "input"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_confirmInput",
          "description": "update manually the value with the native input",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 218,
              "column": 6
            },
            "end": {
              "line": 231,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_updateInput",
          "description": "update manually the native input with the given value",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 236,
              "column": 6
            },
            "end": {
              "line": 249,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            },
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_computeMinlengthString",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 257,
              "column": 6
            },
            "end": {
              "line": 268,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "resize",
          "description": "called automatically when static `_minlengthString` or visibilityState changes, but can be called manually to resize the minwidth of the input, when the input is for example initially hidden",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 315,
              "column": 6
            },
            "end": {
              "line": 330,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "_debouncedResizeWidth",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 332,
              "column": 6
            },
            "end": {
              "line": 338,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "_resizeWidth",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 340,
              "column": 6
            },
            "end": {
              "line": 342,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "focus",
          "description": "focus the input element",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 347,
              "column": 6
            },
            "end": {
              "line": 351,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "blur",
          "description": "removes focus from input",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 356,
              "column": 6
            },
            "end": {
              "line": 359,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "select",
          "description": "selects the input text in the element, and focuses it so the user can subsequently replace the whole entry",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 372,
              "column": 6
            },
            "end": {
              "line": 374,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "click",
          "description": "simulates a click on the element",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 379,
              "column": 6
            },
            "end": {
              "line": 381,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "setCustomValidity",
          "description": "sets on the native input a validity message",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 387,
              "column": 6
            },
            "end": {
              "line": 389,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "msg",
              "type": "String",
              "description": "the message to set"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "reportValidity",
          "description": "reports the validity state of the native input",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 395,
              "column": 6
            },
            "end": {
              "line": 397,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Boolean",
            "desc": "validity state"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "_formatNumberChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 251,
              "column": 6
            },
            "end": {
              "line": 255,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_computeType",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 270,
              "column": 6
            },
            "end": {
              "line": 282,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "numberOptions"
            },
            {
              "name": "decimalSeparator"
            },
            {
              "name": "unit"
            },
            {
              "name": "alwaysSign"
            },
            {
              "name": "padLength"
            },
            {
              "name": "autoPadding"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_computeMinimumIntegerDigits",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 284,
              "column": 6
            },
            "end": {
              "line": 311,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "autoPadding"
            },
            {
              "name": "padLength"
            },
            {
              "name": "def"
            },
            {
              "name": "startAt"
            },
            {
              "name": "min"
            },
            {
              "name": "max"
            },
            {
              "name": "step"
            },
            {
              "name": "numberStyle"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_computeMinimumFractionDigits",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 313,
              "column": 6
            },
            "end": {
              "line": 328,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "step"
            },
            {
              "name": "min"
            },
            {
              "name": "max"
            },
            {
              "name": "numberStyle"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "NumberInputMixin"
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        },
        {
          "url": "demo/form.html",
          "description": "Form Demo"
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 378,
          "column": 4
        },
        "end": {
          "line": 383,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "NumberInput",
      "attributes": [
        {
          "name": "locale",
          "description": "The current locale",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 32,
              "column": 10
            },
            "end": {
              "line": 35,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "decimal-separator",
          "description": "locale separator for local decimal values",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 40,
              "column": 10
            },
            "end": {
              "line": 43,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "grouping-separator",
          "description": "locale separator for grouping decimal values",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 48,
              "column": 10
            },
            "end": {
              "line": 51,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "minimum-fraction-digits",
          "description": "minimum digits right to the decimal separator",
          "sourceRange": {
            "start": {
              "line": 102,
              "column": 10
            },
            "end": {
              "line": 105,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "maximum-fraction-digits",
          "description": "The maximum number of fraction digits to use. Possible values are from 0 to 20; the default for plain number formatting is the larger of minimumFractionDigits and 3; the default for currency formatting is the larger of minimumFractionDigits and the number of minor unit digits provided by the ISO 4217 currency code list (2 if the list doesn't provide that information); the default for percent formatting is the larger of minimumFractionDigits and 0.",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 63,
              "column": 10
            },
            "end": {
              "line": 65,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "minimum-integer-digits",
          "description": "minimum digits left to the decimal separator to pad",
          "sourceRange": {
            "start": {
              "line": 110,
              "column": 10
            },
            "end": {
              "line": 113,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "minimum-significant-digits",
          "description": "The minimum number of significant digits to use. Possible values are from 1 to 21; the default is 1.",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 77,
              "column": 10
            },
            "end": {
              "line": 79,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "maximum-significant-digits",
          "description": "The maximum number of significant digits to use. Possible values are from 1 to 21; the default is minimumSignificantDigits.",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 84,
              "column": 10
            },
            "end": {
              "line": 86,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "unit",
          "description": "unit of the output (only used when `number-style=\"decimal\"`)",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 91,
              "column": 10
            },
            "end": {
              "line": 93,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "unit-separator",
          "description": "the separator to separate value and unit (default: '\\u202F')",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 98,
              "column": 10
            },
            "end": {
              "line": 101,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "always-sign",
          "description": "always put the sign at the beginning",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 106,
              "column": 10
            },
            "end": {
              "line": 108,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "number-style",
          "description": "The formatting style to use. Possible values are \"decimal\" for plain number formatting, \"currency\" for currency formatting, and \"percent\" for percent formatting; the default is \"decimal\".\nnotice: min, max and step are not in percent (so e.g. if step is 0.01, it means that the step is 1%)",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 114,
              "column": 10
            },
            "end": {
              "line": 117,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "use-grouping",
          "description": "if true the number will be grouped according to the locale.",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 122,
              "column": 10
            },
            "end": {
              "line": 124,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "currency",
          "description": "The currency to use in currency formatting. Possible values are the ISO 4217 currency codes, such as \"USD\" for the US dollar, \"EUR\" for the euro, or \"CNY\" for the Chinese RMB â€” see http://www.currency-iso.org/en/home/tables/table-a1.html. There is no default value; if the style is \"currency\", the currency property must be provided.",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 129,
              "column": 10
            },
            "end": {
              "line": 131,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "currency-display",
          "description": "How to display the currency in currency formatting. Possible values are \"symbol\" to use a localized currency symbol such as â‚¬, \"code\" to use the ISO currency code, \"name\" to use a localized currency name such as \"dollar\"; the default is \"symbol\".",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 136,
              "column": 10
            },
            "end": {
              "line": 138,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "format-number",
          "description": "number format function",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 151,
              "column": 10
            },
            "end": {
              "line": 155,
              "column": 11
            }
          },
          "metadata": {},
          "type": "Function | null | undefined",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "parse-number",
          "description": "function to parse the input",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 160,
              "column": 10
            },
            "end": {
              "line": 164,
              "column": 11
            }
          },
          "metadata": {},
          "type": "Function | null | undefined",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "min",
          "description": "minimal input",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 19,
              "column": 10
            },
            "end": {
              "line": 21,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "max",
          "description": "maximal input",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 26,
              "column": 10
            },
            "end": {
              "line": 28,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "step",
          "description": "step for changing the input (referencing to `min` or `0`)",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 34,
              "column": 10
            },
            "end": {
              "line": 37,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "start-at",
          "description": "start where to increment the value",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 43,
              "column": 10
            },
            "end": {
              "line": 45,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "value-as-number",
          "description": "value of the input",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 50,
              "column": 10
            },
            "end": {
              "line": 54,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "default",
          "description": "default value of the value, when it does not validate",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 70,
              "column": 10
            },
            "end": {
              "line": 73,
              "column": 11
            }
          },
          "metadata": {},
          "type": "Object | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "saturate",
          "description": "if true, the value does not revolve the range according to the maximum or the minimum",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 67,
              "column": 10
            },
            "end": {
              "line": 70,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "use-negative-zero",
          "description": "if true, the value will break on 0 to -0",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 75,
              "column": 10
            },
            "end": {
              "line": 78,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "no-clamp",
          "description": "if true, the value does not clamp according to the given step",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 83,
              "column": 10
            },
            "end": {
              "line": 86,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "name",
          "description": "name of the input",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 38,
              "column": 10
            },
            "end": {
              "line": 40,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "title",
          "description": "description for the element and can be used as a hint for invalid values",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 45,
              "column": 10
            },
            "end": {
              "line": 48,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "property-for-value",
          "description": "defines the property that should be used for the value",
          "sourceRange": {
            "start": {
              "line": 123,
              "column": 10
            },
            "end": {
              "line": 126,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "value",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 115,
              "column": 10
            },
            "end": {
              "line": 118,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "disabled",
          "description": "disables the input",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 78,
              "column": 10
            },
            "end": {
              "line": 82,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "invalid",
          "description": "required attribute",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 87,
              "column": 10
            },
            "end": {
              "line": 92,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "required",
          "description": "required attribute",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 97,
              "column": 10
            },
            "end": {
              "line": 102,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "value-is-set",
          "description": "is true when the value is set",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 107,
              "column": 10
            },
            "end": {
              "line": 111,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "type",
          "description": "type of the input",
          "sourceRange": {
            "start": {
              "line": 79,
              "column": 10
            },
            "end": {
              "line": 82,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "input",
          "description": "the immediate input string",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 136,
              "column": 10
            },
            "end": {
              "line": 140,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "validation-message",
          "description": "message to set on the input to show if the input does not validate",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 145,
              "column": 10
            },
            "end": {
              "line": 148,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "placeholder",
          "description": "the placeholder string",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 153,
              "column": 10
            },
            "end": {
              "line": 155,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "minlength",
          "description": "the minlength of the input",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 160,
              "column": 10
            },
            "end": {
              "line": 162,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "auto-resize",
          "description": "if true, the width will change when typing",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 167,
              "column": 10
            },
            "end": {
              "line": 170,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "pad-length",
          "description": "length to pad the string (with `0`) according to the total amount of numbers",
          "sourceRange": {
            "start": {
              "line": 87,
              "column": 10
            },
            "end": {
              "line": 89,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "auto-padding",
          "description": "enables auto padding",
          "sourceRange": {
            "start": {
              "line": 95,
              "column": 10
            },
            "end": {
              "line": 97,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "NumberInputMixin"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "number-input",
      "mixins": [
        "NumberInputMixin"
      ]
    },
    {
      "description": "`integer-input` is an element that can:\n* prevent non numeric input\n* guarantee **live**-data to be valid\n* pad a value with `0` (to a specific length)\n* size the input (according to it's length)\n* overflow to minimum or underflow to maximum\n* saturate to minimum or to maximum\n* display a specified unit and size the input\n\nExample:\n```html\n<integer-input step=\"2\" min=\"-20\" max=\"140\" pad-length=\"2\"></integer-input>\n```\n\nIt sizes automatically. Use `key-up` and `key-down` to increment the value. If `step` is given, the value is a **multiple** of `step`.\n\n Have a look at [input-picker-pattern#input-shared-style](https://github.com/fooloomanzoo/input-picker-pattern#input-shared-style) to see how to style the element.\n\n```css\n integer-input {\n  --input-disabled-color: grey;\n  --input-focus-background: rgba(0,0,0,0.3);\n  --input-focus: {\n    font-weight: bold;\n  };\n  --input-placeholder: {\n    color: pink;\n  };\n}\n```",
      "summary": "",
      "path": "integer-input.html",
      "properties": [
        {
          "name": "locale",
          "type": "string | null | undefined",
          "description": "The current locale",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 32,
              "column": 10
            },
            "end": {
              "line": 35,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "decimalSeparator",
          "type": "string | null | undefined",
          "description": "locale separator for local decimal values",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 40,
              "column": 10
            },
            "end": {
              "line": 43,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "String"
            }
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "groupingSeparator",
          "type": "string | null | undefined",
          "description": "locale separator for grouping decimal values",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 48,
              "column": 10
            },
            "end": {
              "line": 51,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "String"
            }
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "minimumFractionDigits",
          "type": "number | null | undefined",
          "description": "minimum digits right to the decimal separator",
          "privacy": "public",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 102,
              "column": 10
            },
            "end": {
              "line": 105,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "maximumFractionDigits",
          "type": "number | null | undefined",
          "description": "The maximum number of fraction digits to use",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 31,
              "column": 10
            },
            "end": {
              "line": 35,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Number"
            }
          },
          "defaultValue": "0",
          "inheritedFrom": "IntegerInputMixin"
        },
        {
          "name": "minimumIntegerDigits",
          "type": "number | null | undefined",
          "description": "minimum digits left to the decimal separator to pad",
          "privacy": "public",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 110,
              "column": 10
            },
            "end": {
              "line": 113,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "minimumSignificantDigits",
          "type": "number | null | undefined",
          "description": "The minimum number of significant digits to use. Possible values are from 1 to 21; the default is 1.",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 77,
              "column": 10
            },
            "end": {
              "line": 79,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "maximumSignificantDigits",
          "type": "number | null | undefined",
          "description": "The maximum number of significant digits to use. Possible values are from 1 to 21; the default is minimumSignificantDigits.",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 84,
              "column": 10
            },
            "end": {
              "line": 86,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "unit",
          "type": "string | null | undefined",
          "description": "unit of the output (only used when `number-style=\"decimal\"`)",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 91,
              "column": 10
            },
            "end": {
              "line": 93,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "unitSeparator",
          "type": "string | null | undefined",
          "description": "the separator to separate value and unit (default: '\\u202F')",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 98,
              "column": 10
            },
            "end": {
              "line": 101,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"â€¯\"",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "alwaysSign",
          "type": "boolean | null | undefined",
          "description": "always put the sign at the beginning",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 106,
              "column": 10
            },
            "end": {
              "line": 108,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "numberStyle",
          "type": "string | null | undefined",
          "description": "The formatting style to use. Possible values are \"decimal\" for plain number formatting, \"currency\" for currency formatting, and \"percent\" for percent formatting; the default is \"decimal\".\nnotice: min, max and step are not in percent (so e.g. if step is 0.01, it means that the step is 1%)",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 114,
              "column": 10
            },
            "end": {
              "line": 117,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"decimal\"",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "useGrouping",
          "type": "boolean | null | undefined",
          "description": "if true the number will be grouped according to the locale.",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 122,
              "column": 10
            },
            "end": {
              "line": 124,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "currency",
          "type": "string | null | undefined",
          "description": "The currency to use in currency formatting. Possible values are the ISO 4217 currency codes, such as \"USD\" for the US dollar, \"EUR\" for the euro, or \"CNY\" for the Chinese RMB â€” see http://www.currency-iso.org/en/home/tables/table-a1.html. There is no default value; if the style is \"currency\", the currency property must be provided.",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 129,
              "column": 10
            },
            "end": {
              "line": 131,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "currencyDisplay",
          "type": "string | null | undefined",
          "description": "How to display the currency in currency formatting. Possible values are \"symbol\" to use a localized currency symbol such as â‚¬, \"code\" to use the ISO currency code, \"name\" to use a localized currency name such as \"dollar\"; the default is \"symbol\".",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 136,
              "column": 10
            },
            "end": {
              "line": 138,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "_numberOptions",
          "type": "number | null | undefined",
          "description": "number format options",
          "privacy": "protected",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 143,
              "column": 10
            },
            "end": {
              "line": 146,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "formatNumber",
          "type": "Function | null | undefined",
          "description": "number format function",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 151,
              "column": 10
            },
            "end": {
              "line": 155,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true,
              "attributeType": "Function"
            }
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "parseNumber",
          "type": "Function | null | undefined",
          "description": "function to parse the input",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 160,
              "column": 10
            },
            "end": {
              "line": 164,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true,
              "attributeType": "Function"
            }
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "min",
          "type": "number",
          "description": "minimal input",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 19,
              "column": 10
            },
            "end": {
              "line": 21,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "max",
          "type": "number",
          "description": "maximal input",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 26,
              "column": 10
            },
            "end": {
              "line": 28,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "step",
          "type": "number",
          "description": "step for changing the input (referencing to `min` or `0`)",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 23,
              "column": 10
            },
            "end": {
              "line": 27,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_stepChanged\"",
              "attributeType": "Number"
            }
          },
          "defaultValue": "1",
          "inheritedFrom": "IntegerInputMixin"
        },
        {
          "name": "startAt",
          "type": "number",
          "description": "start where to increment the value",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 43,
              "column": 10
            },
            "end": {
              "line": 45,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "valueAsNumber",
          "type": "number",
          "description": "value of the input",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 50,
              "column": 10
            },
            "end": {
              "line": 54,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_valueAsNumberChanged\"",
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "default",
          "type": "Object | null | undefined",
          "description": "default value of the value, when it does not validate",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 70,
              "column": 10
            },
            "end": {
              "line": 73,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_defaultChanged\"",
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "saturate",
          "type": "boolean",
          "description": "if true, the value does not revolve the range according to the maximum or the minimum",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 67,
              "column": 10
            },
            "end": {
              "line": 70,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_updateValueAsNumber\"",
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "useNegativeZero",
          "type": "boolean",
          "description": "if true, the value will break on 0 to -0",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 75,
              "column": 10
            },
            "end": {
              "line": 78,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_updateValueAsNumber\"",
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "noClamp",
          "type": "boolean",
          "description": "if true, the value does not clamp according to the given step",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 83,
              "column": 10
            },
            "end": {
              "line": 86,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_updateValueAsNumber\"",
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "name",
          "type": "string | null | undefined",
          "description": "name of the input",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 38,
              "column": 10
            },
            "end": {
              "line": 40,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "title",
          "type": "string | null | undefined",
          "description": "description for the element and can be used as a hint for invalid values",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 45,
              "column": 10
            },
            "end": {
              "line": 48,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "propertyForValue",
          "type": "string | null | undefined",
          "description": "defines the property that should be used for the value",
          "privacy": "public",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 123,
              "column": 10
            },
            "end": {
              "line": 126,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"valueAsNumber\"",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "value",
          "type": "number | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 115,
              "column": 10
            },
            "end": {
              "line": 118,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "disabled",
          "type": "boolean | null | undefined",
          "description": "disables the input",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 78,
              "column": 10
            },
            "end": {
              "line": 82,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "invalid",
          "type": "boolean | null | undefined",
          "description": "required attribute",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 87,
              "column": 10
            },
            "end": {
              "line": 92,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "required",
          "type": "boolean | null | undefined",
          "description": "required attribute",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 97,
              "column": 10
            },
            "end": {
              "line": 102,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "valueIsSet",
          "type": "boolean | null | undefined",
          "description": "is true when the value is set",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 107,
              "column": 10
            },
            "end": {
              "line": 111,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_isSet",
          "type": "Function | null | undefined",
          "description": "defines whether the value is set",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 116,
              "column": 10
            },
            "end": {
              "line": 118,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Function"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_validate",
          "type": "Function | null | undefined",
          "description": "validates the value (when required)",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 123,
              "column": 10
            },
            "end": {
              "line": 125,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Function"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "type",
          "type": "string | null | undefined",
          "description": "type of the input",
          "privacy": "public",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 79,
              "column": 10
            },
            "end": {
              "line": 82,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "String"
            }
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "input",
          "type": "string | null | undefined",
          "description": "the immediate input string",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 136,
              "column": 10
            },
            "end": {
              "line": 140,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_inputChanged\"",
              "attributeType": "String"
            }
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "validationMessage",
          "type": "string | null | undefined",
          "description": "message to set on the input to show if the input does not validate",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 145,
              "column": 10
            },
            "end": {
              "line": 148,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"setCustomValidity\"",
              "attributeType": "String"
            }
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "placeholder",
          "type": "string | null | undefined",
          "description": "the placeholder string",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 153,
              "column": 10
            },
            "end": {
              "line": 155,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "minlength",
          "type": "number | null | undefined",
          "description": "the minlength of the input",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 160,
              "column": 10
            },
            "end": {
              "line": 162,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "autoResize",
          "type": "boolean | null | undefined",
          "description": "if true, the width will change when typing",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 167,
              "column": 10
            },
            "end": {
              "line": 170,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_debouncedResizeWidth\"",
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "_minlengthString",
          "type": "string | null | undefined",
          "description": "string that is used to compute the minimal width of the input",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 175,
              "column": 10
            },
            "end": {
              "line": 177,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "padLength",
          "type": "number | null | undefined",
          "description": "length to pad the string (with `0`) according to the total amount of numbers",
          "privacy": "public",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 87,
              "column": 10
            },
            "end": {
              "line": 89,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "autoPadding",
          "type": "boolean",
          "description": "enables auto padding",
          "privacy": "public",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 95,
              "column": 10
            },
            "end": {
              "line": 97,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "NumberInputMixin"
        }
      ],
      "methods": [
        {
          "name": "_localeChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 174,
              "column": 6
            },
            "end": {
              "line": 236,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "locale"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "_computeNumberOptions",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 238,
              "column": 6
            },
            "end": {
              "line": 281,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "minimumIntegerDigits"
            },
            {
              "name": "minimumFractionDigits"
            },
            {
              "name": "maximumFractionDigits"
            },
            {
              "name": "minimumSignificantDigits"
            },
            {
              "name": "maximumSignificantDigits"
            },
            {
              "name": "useGrouping"
            },
            {
              "name": "style"
            },
            {
              "name": "currency"
            },
            {
              "name": "currencyDisplay"
            }
          ],
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "_computeFormatNumber",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 283,
              "column": 6
            },
            "end": {
              "line": 310,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "locale"
            },
            {
              "name": "numberOptions"
            },
            {
              "name": "unit"
            },
            {
              "name": "unitSeparator"
            },
            {
              "name": "alwaysSign"
            }
          ],
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "_computeParseNumber",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 312,
              "column": 6
            },
            "end": {
              "line": 398,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "decimalSeparator"
            },
            {
              "name": "groupingSeparator"
            },
            {
              "name": "numberOptions"
            }
          ],
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "_minMaxChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 96,
              "column": 6
            },
            "end": {
              "line": 105,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "min"
            },
            {
              "name": "max"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "_valueAsNumberChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 185,
              "column": 6
            },
            "end": {
              "line": 192,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "valueAsNumber"
            },
            {
              "name": "oldValue"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_defaultChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 194,
              "column": 6
            },
            "end": {
              "line": 199,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "def"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_computeDefaultValue",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 201,
              "column": 6
            },
            "end": {
              "line": 206,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_checkValueAsNumber",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 136,
              "column": 6
            },
            "end": {
              "line": 161,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            },
            {
              "name": "oldValue"
            }
          ],
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "_updateValueAsNumber",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 163,
              "column": 6
            },
            "end": {
              "line": 168,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "_checkStep",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 170,
              "column": 6
            },
            "end": {
              "line": 187,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            },
            {
              "name": "step"
            }
          ],
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "_safeMult",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 47,
              "column": 6
            },
            "end": {
              "line": 49,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "a"
            },
            {
              "name": "b"
            }
          ],
          "inheritedFrom": "IntegerInputMixin"
        },
        {
          "name": "_safeAdd",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 43,
              "column": 6
            },
            "end": {
              "line": 45,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "a"
            },
            {
              "name": "b"
            }
          ],
          "inheritedFrom": "IntegerInputMixin"
        },
        {
          "name": "_stepChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 209,
              "column": 6
            },
            "end": {
              "line": 217,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "step"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "increase",
          "description": "Increase value by step",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 222,
              "column": 6
            },
            "end": {
              "line": 224,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "decrease",
          "description": "Decrease value by step",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 229,
              "column": 6
            },
            "end": {
              "line": 231,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "_increm",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 233,
              "column": 6
            },
            "end": {
              "line": 265,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "step"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "_shouldPropertyChange",
          "description": "overwritten of polymer to handle -0",
          "privacy": "protected",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 270,
              "column": 6
            },
            "end": {
              "line": 276,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property"
            },
            {
              "name": "value"
            },
            {
              "name": "old"
            }
          ],
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "_attachDom",
          "description": "attach dom with `delegatesFocus: true` so that the element is also focussed while its's children are too, and to autofocus to first tabable",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 22,
              "column": 6
            },
            "end": {
              "line": 31,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dom"
            }
          ],
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 188,
              "column": 6
            },
            "end": {
              "line": 194,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "_defaultIsSet",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 147,
              "column": 6
            },
            "end": {
              "line": 149,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "Object",
              "description": "value to test"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "true, if the value is set"
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_defaultValidate",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 159,
              "column": 6
            },
            "end": {
              "line": 161,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "isSet",
              "type": "Function",
              "description": "The function that defines if the value is set"
            },
            {
              "name": "value",
              "type": "Object",
              "description": "value to validate"
            },
            {
              "name": "required",
              "type": "Boolean",
              "description": "if true, the value is required"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "true, if the value is valid"
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_computeInvalid",
          "description": "defines whether the value is set",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 170,
              "column": 6
            },
            "end": {
              "line": 172,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "validate"
            },
            {
              "name": "isSet"
            },
            {
              "name": "value"
            },
            {
              "name": "required"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_computeValueIsSet",
          "description": "defines whether the value is set",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 179,
              "column": 6
            },
            "end": {
              "line": 181,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "isSet"
            },
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_valueChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 171,
              "column": 6
            },
            "end": {
              "line": 183,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            },
            {
              "name": "oldValue"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_createReflectPropertyToValueObserver",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 200,
              "column": 6
            },
            "end": {
              "line": 210,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "prop"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_reflectPropertyToValue",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 212,
              "column": 6
            },
            "end": {
              "line": 214,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_reflectValueToProperty",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 216,
              "column": 6
            },
            "end": {
              "line": 218,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "validate",
          "description": "validates the input for iron-form",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 364,
              "column": 6
            },
            "end": {
              "line": 367,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "reset",
          "description": "reset the value",
          "privacy": "public",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 211,
              "column": 6
            },
            "end": {
              "line": 213,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "disconnectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 196,
              "column": 6
            },
            "end": {
              "line": 199,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "_delayedAddEventListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 201,
              "column": 6
            },
            "end": {
              "line": 216,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "_addEventListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 218,
              "column": 6
            },
            "end": {
              "line": 225,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "_removeEventListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 227,
              "column": 6
            },
            "end": {
              "line": 234,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "_checkKeycode",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 140,
              "column": 6
            },
            "end": {
              "line": 155,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_inputChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 157,
              "column": 6
            },
            "end": {
              "line": 169,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "input"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_confirmInput",
          "description": "update manually the value with the native input",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 218,
              "column": 6
            },
            "end": {
              "line": 231,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_updateInput",
          "description": "update manually the native input with the given value",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 236,
              "column": 6
            },
            "end": {
              "line": 249,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            },
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_computeMinlengthString",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 257,
              "column": 6
            },
            "end": {
              "line": 268,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "resize",
          "description": "called automatically when static `_minlengthString` or visibilityState changes, but can be called manually to resize the minwidth of the input, when the input is for example initially hidden",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 315,
              "column": 6
            },
            "end": {
              "line": 330,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "_debouncedResizeWidth",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 332,
              "column": 6
            },
            "end": {
              "line": 338,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "_resizeWidth",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 340,
              "column": 6
            },
            "end": {
              "line": 342,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "focus",
          "description": "focus the input element",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 347,
              "column": 6
            },
            "end": {
              "line": 351,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "blur",
          "description": "removes focus from input",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 356,
              "column": 6
            },
            "end": {
              "line": 359,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "select",
          "description": "selects the input text in the element, and focuses it so the user can subsequently replace the whole entry",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 372,
              "column": 6
            },
            "end": {
              "line": 374,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "click",
          "description": "simulates a click on the element",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 379,
              "column": 6
            },
            "end": {
              "line": 381,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "setCustomValidity",
          "description": "sets on the native input a validity message",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 387,
              "column": 6
            },
            "end": {
              "line": 389,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "msg",
              "type": "String",
              "description": "the message to set"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "reportValidity",
          "description": "reports the validity state of the native input",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 395,
              "column": 6
            },
            "end": {
              "line": 397,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Boolean",
            "desc": "validity state"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "_formatNumberChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 251,
              "column": 6
            },
            "end": {
              "line": 255,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_computeType",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 270,
              "column": 6
            },
            "end": {
              "line": 282,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "numberOptions"
            },
            {
              "name": "decimalSeparator"
            },
            {
              "name": "unit"
            },
            {
              "name": "alwaysSign"
            },
            {
              "name": "padLength"
            },
            {
              "name": "autoPadding"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_computeMinimumIntegerDigits",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 284,
              "column": 6
            },
            "end": {
              "line": 311,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "autoPadding"
            },
            {
              "name": "padLength"
            },
            {
              "name": "def"
            },
            {
              "name": "startAt"
            },
            {
              "name": "min"
            },
            {
              "name": "max"
            },
            {
              "name": "step"
            },
            {
              "name": "numberStyle"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_computeMinimumFractionDigits",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 39,
              "column": 6
            },
            "end": {
              "line": 41,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "IntegerInputMixin"
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        },
        {
          "url": "demo/form.html",
          "description": "Form Demo"
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 97,
          "column": 4
        },
        "end": {
          "line": 102,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "IntegerInput",
      "attributes": [
        {
          "name": "locale",
          "description": "The current locale",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 32,
              "column": 10
            },
            "end": {
              "line": 35,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "decimal-separator",
          "description": "locale separator for local decimal values",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 40,
              "column": 10
            },
            "end": {
              "line": 43,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "grouping-separator",
          "description": "locale separator for grouping decimal values",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 48,
              "column": 10
            },
            "end": {
              "line": 51,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "minimum-fraction-digits",
          "description": "minimum digits right to the decimal separator",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 102,
              "column": 10
            },
            "end": {
              "line": 105,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "maximum-fraction-digits",
          "description": "The maximum number of fraction digits to use",
          "sourceRange": {
            "start": {
              "line": 31,
              "column": 10
            },
            "end": {
              "line": 35,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "IntegerInputMixin"
        },
        {
          "name": "minimum-integer-digits",
          "description": "minimum digits left to the decimal separator to pad",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 110,
              "column": 10
            },
            "end": {
              "line": 113,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "minimum-significant-digits",
          "description": "The minimum number of significant digits to use. Possible values are from 1 to 21; the default is 1.",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 77,
              "column": 10
            },
            "end": {
              "line": 79,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "maximum-significant-digits",
          "description": "The maximum number of significant digits to use. Possible values are from 1 to 21; the default is minimumSignificantDigits.",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 84,
              "column": 10
            },
            "end": {
              "line": 86,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "unit",
          "description": "unit of the output (only used when `number-style=\"decimal\"`)",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 91,
              "column": 10
            },
            "end": {
              "line": 93,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "unit-separator",
          "description": "the separator to separate value and unit (default: '\\u202F')",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 98,
              "column": 10
            },
            "end": {
              "line": 101,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "always-sign",
          "description": "always put the sign at the beginning",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 106,
              "column": 10
            },
            "end": {
              "line": 108,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "number-style",
          "description": "The formatting style to use. Possible values are \"decimal\" for plain number formatting, \"currency\" for currency formatting, and \"percent\" for percent formatting; the default is \"decimal\".\nnotice: min, max and step are not in percent (so e.g. if step is 0.01, it means that the step is 1%)",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 114,
              "column": 10
            },
            "end": {
              "line": 117,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "use-grouping",
          "description": "if true the number will be grouped according to the locale.",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 122,
              "column": 10
            },
            "end": {
              "line": 124,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "currency",
          "description": "The currency to use in currency formatting. Possible values are the ISO 4217 currency codes, such as \"USD\" for the US dollar, \"EUR\" for the euro, or \"CNY\" for the Chinese RMB â€” see http://www.currency-iso.org/en/home/tables/table-a1.html. There is no default value; if the style is \"currency\", the currency property must be provided.",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 129,
              "column": 10
            },
            "end": {
              "line": 131,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "currency-display",
          "description": "How to display the currency in currency formatting. Possible values are \"symbol\" to use a localized currency symbol such as â‚¬, \"code\" to use the ISO currency code, \"name\" to use a localized currency name such as \"dollar\"; the default is \"symbol\".",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 136,
              "column": 10
            },
            "end": {
              "line": 138,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "format-number",
          "description": "number format function",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 151,
              "column": 10
            },
            "end": {
              "line": 155,
              "column": 11
            }
          },
          "metadata": {},
          "type": "Function | null | undefined",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "parse-number",
          "description": "function to parse the input",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 160,
              "column": 10
            },
            "end": {
              "line": 164,
              "column": 11
            }
          },
          "metadata": {},
          "type": "Function | null | undefined",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "min",
          "description": "minimal input",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 19,
              "column": 10
            },
            "end": {
              "line": 21,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "max",
          "description": "maximal input",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 26,
              "column": 10
            },
            "end": {
              "line": 28,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "step",
          "description": "step for changing the input (referencing to `min` or `0`)",
          "sourceRange": {
            "start": {
              "line": 23,
              "column": 10
            },
            "end": {
              "line": 27,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "IntegerInputMixin"
        },
        {
          "name": "start-at",
          "description": "start where to increment the value",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 43,
              "column": 10
            },
            "end": {
              "line": 45,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "value-as-number",
          "description": "value of the input",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 50,
              "column": 10
            },
            "end": {
              "line": 54,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "default",
          "description": "default value of the value, when it does not validate",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 70,
              "column": 10
            },
            "end": {
              "line": 73,
              "column": 11
            }
          },
          "metadata": {},
          "type": "Object | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "saturate",
          "description": "if true, the value does not revolve the range according to the maximum or the minimum",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 67,
              "column": 10
            },
            "end": {
              "line": 70,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "use-negative-zero",
          "description": "if true, the value will break on 0 to -0",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 75,
              "column": 10
            },
            "end": {
              "line": 78,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "no-clamp",
          "description": "if true, the value does not clamp according to the given step",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 83,
              "column": 10
            },
            "end": {
              "line": 86,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "name",
          "description": "name of the input",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 38,
              "column": 10
            },
            "end": {
              "line": 40,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "title",
          "description": "description for the element and can be used as a hint for invalid values",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 45,
              "column": 10
            },
            "end": {
              "line": 48,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "property-for-value",
          "description": "defines the property that should be used for the value",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 123,
              "column": 10
            },
            "end": {
              "line": 126,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "value",
          "description": "",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 115,
              "column": 10
            },
            "end": {
              "line": 118,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "disabled",
          "description": "disables the input",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 78,
              "column": 10
            },
            "end": {
              "line": 82,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "invalid",
          "description": "required attribute",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 87,
              "column": 10
            },
            "end": {
              "line": 92,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "required",
          "description": "required attribute",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 97,
              "column": 10
            },
            "end": {
              "line": 102,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "value-is-set",
          "description": "is true when the value is set",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 107,
              "column": 10
            },
            "end": {
              "line": 111,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "type",
          "description": "type of the input",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 79,
              "column": 10
            },
            "end": {
              "line": 82,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "input",
          "description": "the immediate input string",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 136,
              "column": 10
            },
            "end": {
              "line": 140,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "validation-message",
          "description": "message to set on the input to show if the input does not validate",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 145,
              "column": 10
            },
            "end": {
              "line": 148,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "placeholder",
          "description": "the placeholder string",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 153,
              "column": 10
            },
            "end": {
              "line": 155,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "minlength",
          "description": "the minlength of the input",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 160,
              "column": 10
            },
            "end": {
              "line": 162,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "auto-resize",
          "description": "if true, the width will change when typing",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 167,
              "column": 10
            },
            "end": {
              "line": 170,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "pad-length",
          "description": "length to pad the string (with `0`) according to the total amount of numbers",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 87,
              "column": 10
            },
            "end": {
              "line": 89,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "auto-padding",
          "description": "enables auto padding",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 95,
              "column": 10
            },
            "end": {
              "line": 97,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "NumberInputMixin"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "integer-input",
      "mixins": [
        "IntegerInputMixin"
      ]
    }
  ],
  "mixins": [
    {
      "description": "mixin to create a number-input",
      "summary": "",
      "path": "number-input.html",
      "properties": [
        {
          "name": "locale",
          "type": "string | null | undefined",
          "description": "The current locale",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 32,
              "column": 10
            },
            "end": {
              "line": 35,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "decimalSeparator",
          "type": "string | null | undefined",
          "description": "locale separator for local decimal values",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 40,
              "column": 10
            },
            "end": {
              "line": 43,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "String"
            }
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "groupingSeparator",
          "type": "string | null | undefined",
          "description": "locale separator for grouping decimal values",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 48,
              "column": 10
            },
            "end": {
              "line": 51,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "String"
            }
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "minimumFractionDigits",
          "type": "number | null | undefined",
          "description": "minimum digits right to the decimal separator",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 102,
              "column": 10
            },
            "end": {
              "line": 105,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Number"
            }
          }
        },
        {
          "name": "maximumFractionDigits",
          "type": "number | null | undefined",
          "description": "The maximum number of fraction digits to use. Possible values are from 0 to 20; the default for plain number formatting is the larger of minimumFractionDigits and 3; the default for currency formatting is the larger of minimumFractionDigits and the number of minor unit digits provided by the ISO 4217 currency code list (2 if the list doesn't provide that information); the default for percent formatting is the larger of minimumFractionDigits and 0.",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 63,
              "column": 10
            },
            "end": {
              "line": 65,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "minimumIntegerDigits",
          "type": "number | null | undefined",
          "description": "minimum digits left to the decimal separator to pad",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 110,
              "column": 10
            },
            "end": {
              "line": 113,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Number"
            }
          }
        },
        {
          "name": "minimumSignificantDigits",
          "type": "number | null | undefined",
          "description": "The minimum number of significant digits to use. Possible values are from 1 to 21; the default is 1.",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 77,
              "column": 10
            },
            "end": {
              "line": 79,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "maximumSignificantDigits",
          "type": "number | null | undefined",
          "description": "The maximum number of significant digits to use. Possible values are from 1 to 21; the default is minimumSignificantDigits.",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 84,
              "column": 10
            },
            "end": {
              "line": 86,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "unit",
          "type": "string | null | undefined",
          "description": "unit of the output (only used when `number-style=\"decimal\"`)",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 91,
              "column": 10
            },
            "end": {
              "line": 93,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "unitSeparator",
          "type": "string | null | undefined",
          "description": "the separator to separate value and unit (default: '\\u202F')",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 98,
              "column": 10
            },
            "end": {
              "line": 101,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"â€¯\"",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "alwaysSign",
          "type": "boolean | null | undefined",
          "description": "always put the sign at the beginning",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 106,
              "column": 10
            },
            "end": {
              "line": 108,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "numberStyle",
          "type": "string | null | undefined",
          "description": "The formatting style to use. Possible values are \"decimal\" for plain number formatting, \"currency\" for currency formatting, and \"percent\" for percent formatting; the default is \"decimal\".\nnotice: min, max and step are not in percent (so e.g. if step is 0.01, it means that the step is 1%)",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 114,
              "column": 10
            },
            "end": {
              "line": 117,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"decimal\"",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "useGrouping",
          "type": "boolean | null | undefined",
          "description": "if true the number will be grouped according to the locale.",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 122,
              "column": 10
            },
            "end": {
              "line": 124,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "currency",
          "type": "string | null | undefined",
          "description": "The currency to use in currency formatting. Possible values are the ISO 4217 currency codes, such as \"USD\" for the US dollar, \"EUR\" for the euro, or \"CNY\" for the Chinese RMB â€” see http://www.currency-iso.org/en/home/tables/table-a1.html. There is no default value; if the style is \"currency\", the currency property must be provided.",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 129,
              "column": 10
            },
            "end": {
              "line": 131,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "currencyDisplay",
          "type": "string | null | undefined",
          "description": "How to display the currency in currency formatting. Possible values are \"symbol\" to use a localized currency symbol such as â‚¬, \"code\" to use the ISO currency code, \"name\" to use a localized currency name such as \"dollar\"; the default is \"symbol\".",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 136,
              "column": 10
            },
            "end": {
              "line": 138,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "_numberOptions",
          "type": "number | null | undefined",
          "description": "number format options",
          "privacy": "protected",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 143,
              "column": 10
            },
            "end": {
              "line": 146,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "formatNumber",
          "type": "Function | null | undefined",
          "description": "number format function",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 151,
              "column": 10
            },
            "end": {
              "line": 155,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true,
              "attributeType": "Function"
            }
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "parseNumber",
          "type": "Function | null | undefined",
          "description": "function to parse the input",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 160,
              "column": 10
            },
            "end": {
              "line": 164,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true,
              "attributeType": "Function"
            }
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "min",
          "type": "number",
          "description": "minimal input",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 19,
              "column": 10
            },
            "end": {
              "line": 21,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "max",
          "type": "number",
          "description": "maximal input",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 26,
              "column": 10
            },
            "end": {
              "line": 28,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "step",
          "type": "number",
          "description": "step for changing the input (referencing to `min` or `0`)",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 34,
              "column": 10
            },
            "end": {
              "line": 37,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_stepChanged\"",
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "startAt",
          "type": "number",
          "description": "start where to increment the value",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 43,
              "column": 10
            },
            "end": {
              "line": 45,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "valueAsNumber",
          "type": "number",
          "description": "value of the input",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 50,
              "column": 10
            },
            "end": {
              "line": 54,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_valueAsNumberChanged\"",
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "default",
          "type": "Object | null | undefined",
          "description": "default value of the value, when it does not validate",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 70,
              "column": 10
            },
            "end": {
              "line": 73,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_defaultChanged\"",
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "saturate",
          "type": "boolean",
          "description": "if true, the value does not revolve the range according to the maximum or the minimum",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 67,
              "column": 10
            },
            "end": {
              "line": 70,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_updateValueAsNumber\"",
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "useNegativeZero",
          "type": "boolean",
          "description": "if true, the value will break on 0 to -0",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 75,
              "column": 10
            },
            "end": {
              "line": 78,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_updateValueAsNumber\"",
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "noClamp",
          "type": "boolean",
          "description": "if true, the value does not clamp according to the given step",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 83,
              "column": 10
            },
            "end": {
              "line": 86,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_updateValueAsNumber\"",
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "name",
          "type": "string | null | undefined",
          "description": "name of the input",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 38,
              "column": 10
            },
            "end": {
              "line": 40,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "title",
          "type": "string | null | undefined",
          "description": "description for the element and can be used as a hint for invalid values",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 45,
              "column": 10
            },
            "end": {
              "line": 48,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "propertyForValue",
          "type": "string | null | undefined",
          "description": "defines the property that should be used for the value",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 123,
              "column": 10
            },
            "end": {
              "line": 126,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"valueAsNumber\""
        },
        {
          "name": "value",
          "type": "number | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 115,
              "column": 10
            },
            "end": {
              "line": 118,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Number"
            }
          }
        },
        {
          "name": "disabled",
          "type": "boolean | null | undefined",
          "description": "disables the input",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 78,
              "column": 10
            },
            "end": {
              "line": 82,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "invalid",
          "type": "boolean | null | undefined",
          "description": "required attribute",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 87,
              "column": 10
            },
            "end": {
              "line": 92,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "required",
          "type": "boolean | null | undefined",
          "description": "required attribute",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 97,
              "column": 10
            },
            "end": {
              "line": 102,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "valueIsSet",
          "type": "boolean | null | undefined",
          "description": "is true when the value is set",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 107,
              "column": 10
            },
            "end": {
              "line": 111,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_isSet",
          "type": "Function | null | undefined",
          "description": "defines whether the value is set",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 116,
              "column": 10
            },
            "end": {
              "line": 118,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Function"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_validate",
          "type": "Function | null | undefined",
          "description": "validates the value (when required)",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 123,
              "column": 10
            },
            "end": {
              "line": 125,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Function"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "type",
          "type": "string | null | undefined",
          "description": "type of the input",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 79,
              "column": 10
            },
            "end": {
              "line": 82,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "String"
            }
          }
        },
        {
          "name": "input",
          "type": "string | null | undefined",
          "description": "the immediate input string",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 136,
              "column": 10
            },
            "end": {
              "line": 140,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_inputChanged\"",
              "attributeType": "String"
            }
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "validationMessage",
          "type": "string | null | undefined",
          "description": "message to set on the input to show if the input does not validate",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 145,
              "column": 10
            },
            "end": {
              "line": 148,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"setCustomValidity\"",
              "attributeType": "String"
            }
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "placeholder",
          "type": "string | null | undefined",
          "description": "the placeholder string",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 153,
              "column": 10
            },
            "end": {
              "line": 155,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "minlength",
          "type": "number | null | undefined",
          "description": "the minlength of the input",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 160,
              "column": 10
            },
            "end": {
              "line": 162,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "autoResize",
          "type": "boolean | null | undefined",
          "description": "if true, the width will change when typing",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 167,
              "column": 10
            },
            "end": {
              "line": 170,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_debouncedResizeWidth\"",
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "_minlengthString",
          "type": "string | null | undefined",
          "description": "string that is used to compute the minimal width of the input",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 175,
              "column": 10
            },
            "end": {
              "line": 177,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "padLength",
          "type": "number | null | undefined",
          "description": "length to pad the string (with `0`) according to the total amount of numbers",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 87,
              "column": 10
            },
            "end": {
              "line": 89,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          }
        },
        {
          "name": "autoPadding",
          "type": "boolean",
          "description": "enables auto padding",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 95,
              "column": 10
            },
            "end": {
              "line": 97,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "_localeChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 174,
              "column": 6
            },
            "end": {
              "line": 236,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "locale"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "_computeNumberOptions",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 238,
              "column": 6
            },
            "end": {
              "line": 281,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "minimumIntegerDigits"
            },
            {
              "name": "minimumFractionDigits"
            },
            {
              "name": "maximumFractionDigits"
            },
            {
              "name": "minimumSignificantDigits"
            },
            {
              "name": "maximumSignificantDigits"
            },
            {
              "name": "useGrouping"
            },
            {
              "name": "style"
            },
            {
              "name": "currency"
            },
            {
              "name": "currencyDisplay"
            }
          ],
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "_computeFormatNumber",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 283,
              "column": 6
            },
            "end": {
              "line": 310,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "locale"
            },
            {
              "name": "numberOptions"
            },
            {
              "name": "unit"
            },
            {
              "name": "unitSeparator"
            },
            {
              "name": "alwaysSign"
            }
          ],
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "_computeParseNumber",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 312,
              "column": 6
            },
            "end": {
              "line": 398,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "decimalSeparator"
            },
            {
              "name": "groupingSeparator"
            },
            {
              "name": "numberOptions"
            }
          ],
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "_minMaxChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 96,
              "column": 6
            },
            "end": {
              "line": 105,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "min"
            },
            {
              "name": "max"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "_valueAsNumberChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 185,
              "column": 6
            },
            "end": {
              "line": 192,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "valueAsNumber"
            },
            {
              "name": "oldValue"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_defaultChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 194,
              "column": 6
            },
            "end": {
              "line": 199,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "def"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_computeDefaultValue",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 201,
              "column": 6
            },
            "end": {
              "line": 206,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ]
        },
        {
          "name": "_checkValueAsNumber",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 136,
              "column": 6
            },
            "end": {
              "line": 161,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            },
            {
              "name": "oldValue"
            }
          ],
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "_updateValueAsNumber",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 163,
              "column": 6
            },
            "end": {
              "line": 168,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "_checkStep",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 170,
              "column": 6
            },
            "end": {
              "line": 187,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            },
            {
              "name": "step"
            }
          ],
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "_safeMult",
          "description": "Emulating handwritten multiplication to keep precision",
          "privacy": "protected",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 195,
              "column": 6
            },
            "end": {
              "line": 197,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "a",
              "type": "?number",
              "description": "First summand"
            },
            {
              "name": "b",
              "type": "?number",
              "description": "Second summand"
            }
          ],
          "return": {
            "type": "number",
            "desc": "Sum"
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "_safeAdd",
          "description": "Emulating handwritten addition to keep precision",
          "privacy": "protected",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 205,
              "column": 6
            },
            "end": {
              "line": 207,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "a",
              "type": "?number",
              "description": "First factor"
            },
            {
              "name": "b",
              "type": "?number",
              "description": "Second factor"
            }
          ],
          "return": {
            "type": "number",
            "desc": "Product"
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "_stepChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 209,
              "column": 6
            },
            "end": {
              "line": 217,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "step"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "increase",
          "description": "Increase value by step",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 222,
              "column": 6
            },
            "end": {
              "line": 224,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "decrease",
          "description": "Decrease value by step",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 229,
              "column": 6
            },
            "end": {
              "line": 231,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "_increm",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 233,
              "column": 6
            },
            "end": {
              "line": 265,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "step"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "_shouldPropertyChange",
          "description": "overwritten of polymer to handle -0",
          "privacy": "protected",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 270,
              "column": 6
            },
            "end": {
              "line": 276,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property"
            },
            {
              "name": "value"
            },
            {
              "name": "old"
            }
          ],
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "_attachDom",
          "description": "attach dom with `delegatesFocus: true` so that the element is also focussed while its's children are too, and to autofocus to first tabable",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 22,
              "column": 6
            },
            "end": {
              "line": 31,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dom"
            }
          ],
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 188,
              "column": 6
            },
            "end": {
              "line": 194,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "_defaultIsSet",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 147,
              "column": 6
            },
            "end": {
              "line": 149,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "Object",
              "description": "value to test"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "true, if the value is set"
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_defaultValidate",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 159,
              "column": 6
            },
            "end": {
              "line": 161,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "isSet",
              "type": "Function",
              "description": "The function that defines if the value is set"
            },
            {
              "name": "value",
              "type": "Object",
              "description": "value to validate"
            },
            {
              "name": "required",
              "type": "Boolean",
              "description": "if true, the value is required"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "true, if the value is valid"
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_computeInvalid",
          "description": "defines whether the value is set",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 170,
              "column": 6
            },
            "end": {
              "line": 172,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "validate"
            },
            {
              "name": "isSet"
            },
            {
              "name": "value"
            },
            {
              "name": "required"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_computeValueIsSet",
          "description": "defines whether the value is set",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 179,
              "column": 6
            },
            "end": {
              "line": 181,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "isSet"
            },
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_valueChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 171,
              "column": 6
            },
            "end": {
              "line": 183,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            },
            {
              "name": "oldValue"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_createReflectPropertyToValueObserver",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 200,
              "column": 6
            },
            "end": {
              "line": 210,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "prop"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_reflectPropertyToValue",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 212,
              "column": 6
            },
            "end": {
              "line": 214,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_reflectValueToProperty",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 216,
              "column": 6
            },
            "end": {
              "line": 218,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "validate",
          "description": "validates the input for iron-form",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 364,
              "column": 6
            },
            "end": {
              "line": 367,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "reset",
          "description": "reset the value",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 211,
              "column": 6
            },
            "end": {
              "line": 213,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "disconnectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 196,
              "column": 6
            },
            "end": {
              "line": 199,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "_delayedAddEventListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 201,
              "column": 6
            },
            "end": {
              "line": 216,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "_addEventListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 218,
              "column": 6
            },
            "end": {
              "line": 225,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "_removeEventListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 227,
              "column": 6
            },
            "end": {
              "line": 234,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "_checkKeycode",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 140,
              "column": 6
            },
            "end": {
              "line": 155,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_inputChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 157,
              "column": 6
            },
            "end": {
              "line": 169,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "input"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_confirmInput",
          "description": "update manually the value with the native input",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 218,
              "column": 6
            },
            "end": {
              "line": 231,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_updateInput",
          "description": "update manually the native input with the given value",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 236,
              "column": 6
            },
            "end": {
              "line": 249,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            },
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_computeMinlengthString",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 257,
              "column": 6
            },
            "end": {
              "line": 268,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "resize",
          "description": "called automatically when static `_minlengthString` or visibilityState changes, but can be called manually to resize the minwidth of the input, when the input is for example initially hidden",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 315,
              "column": 6
            },
            "end": {
              "line": 330,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "_debouncedResizeWidth",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 332,
              "column": 6
            },
            "end": {
              "line": 338,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "_resizeWidth",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 340,
              "column": 6
            },
            "end": {
              "line": 342,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "focus",
          "description": "focus the input element",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 347,
              "column": 6
            },
            "end": {
              "line": 351,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "blur",
          "description": "removes focus from input",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 356,
              "column": 6
            },
            "end": {
              "line": 359,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "select",
          "description": "selects the input text in the element, and focuses it so the user can subsequently replace the whole entry",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 372,
              "column": 6
            },
            "end": {
              "line": 374,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "click",
          "description": "simulates a click on the element",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 379,
              "column": 6
            },
            "end": {
              "line": 381,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "setCustomValidity",
          "description": "sets on the native input a validity message",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 387,
              "column": 6
            },
            "end": {
              "line": 389,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "msg",
              "type": "String",
              "description": "the message to set"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "reportValidity",
          "description": "reports the validity state of the native input",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 395,
              "column": 6
            },
            "end": {
              "line": 397,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Boolean",
            "desc": "validity state"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "_formatNumberChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 251,
              "column": 6
            },
            "end": {
              "line": 255,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_computeType",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 270,
              "column": 6
            },
            "end": {
              "line": 282,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "numberOptions"
            },
            {
              "name": "decimalSeparator"
            },
            {
              "name": "unit"
            },
            {
              "name": "alwaysSign"
            },
            {
              "name": "padLength"
            },
            {
              "name": "autoPadding"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_computeMinimumIntegerDigits",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 284,
              "column": 6
            },
            "end": {
              "line": 311,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "autoPadding"
            },
            {
              "name": "padLength"
            },
            {
              "name": "def"
            },
            {
              "name": "startAt"
            },
            {
              "name": "min"
            },
            {
              "name": "max"
            },
            {
              "name": "step"
            },
            {
              "name": "numberStyle"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_computeMinimumFractionDigits",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 313,
              "column": 6
            },
            "end": {
              "line": 328,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "step"
            },
            {
              "name": "min"
            },
            {
              "name": "max"
            },
            {
              "name": "numberStyle"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 18,
          "column": 2
        },
        "end": {
          "line": 331,
          "column": 3
        }
      },
      "privacy": "public",
      "name": "NumberInputMixin",
      "attributes": [
        {
          "name": "locale",
          "description": "The current locale",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 32,
              "column": 10
            },
            "end": {
              "line": 35,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "decimal-separator",
          "description": "locale separator for local decimal values",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 40,
              "column": 10
            },
            "end": {
              "line": 43,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "grouping-separator",
          "description": "locale separator for grouping decimal values",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 48,
              "column": 10
            },
            "end": {
              "line": 51,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "minimum-fraction-digits",
          "description": "minimum digits right to the decimal separator",
          "sourceRange": {
            "start": {
              "line": 102,
              "column": 10
            },
            "end": {
              "line": 105,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "maximum-fraction-digits",
          "description": "The maximum number of fraction digits to use. Possible values are from 0 to 20; the default for plain number formatting is the larger of minimumFractionDigits and 3; the default for currency formatting is the larger of minimumFractionDigits and the number of minor unit digits provided by the ISO 4217 currency code list (2 if the list doesn't provide that information); the default for percent formatting is the larger of minimumFractionDigits and 0.",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 63,
              "column": 10
            },
            "end": {
              "line": 65,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "minimum-integer-digits",
          "description": "minimum digits left to the decimal separator to pad",
          "sourceRange": {
            "start": {
              "line": 110,
              "column": 10
            },
            "end": {
              "line": 113,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "minimum-significant-digits",
          "description": "The minimum number of significant digits to use. Possible values are from 1 to 21; the default is 1.",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 77,
              "column": 10
            },
            "end": {
              "line": 79,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "maximum-significant-digits",
          "description": "The maximum number of significant digits to use. Possible values are from 1 to 21; the default is minimumSignificantDigits.",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 84,
              "column": 10
            },
            "end": {
              "line": 86,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "unit",
          "description": "unit of the output (only used when `number-style=\"decimal\"`)",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 91,
              "column": 10
            },
            "end": {
              "line": 93,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "unit-separator",
          "description": "the separator to separate value and unit (default: '\\u202F')",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 98,
              "column": 10
            },
            "end": {
              "line": 101,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "always-sign",
          "description": "always put the sign at the beginning",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 106,
              "column": 10
            },
            "end": {
              "line": 108,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "number-style",
          "description": "The formatting style to use. Possible values are \"decimal\" for plain number formatting, \"currency\" for currency formatting, and \"percent\" for percent formatting; the default is \"decimal\".\nnotice: min, max and step are not in percent (so e.g. if step is 0.01, it means that the step is 1%)",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 114,
              "column": 10
            },
            "end": {
              "line": 117,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "use-grouping",
          "description": "if true the number will be grouped according to the locale.",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 122,
              "column": 10
            },
            "end": {
              "line": 124,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "currency",
          "description": "The currency to use in currency formatting. Possible values are the ISO 4217 currency codes, such as \"USD\" for the US dollar, \"EUR\" for the euro, or \"CNY\" for the Chinese RMB â€” see http://www.currency-iso.org/en/home/tables/table-a1.html. There is no default value; if the style is \"currency\", the currency property must be provided.",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 129,
              "column": 10
            },
            "end": {
              "line": 131,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "currency-display",
          "description": "How to display the currency in currency formatting. Possible values are \"symbol\" to use a localized currency symbol such as â‚¬, \"code\" to use the ISO currency code, \"name\" to use a localized currency name such as \"dollar\"; the default is \"symbol\".",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 136,
              "column": 10
            },
            "end": {
              "line": 138,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "format-number",
          "description": "number format function",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 151,
              "column": 10
            },
            "end": {
              "line": 155,
              "column": 11
            }
          },
          "metadata": {},
          "type": "Function | null | undefined",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "parse-number",
          "description": "function to parse the input",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 160,
              "column": 10
            },
            "end": {
              "line": 164,
              "column": 11
            }
          },
          "metadata": {},
          "type": "Function | null | undefined",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "min",
          "description": "minimal input",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 19,
              "column": 10
            },
            "end": {
              "line": 21,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "max",
          "description": "maximal input",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 26,
              "column": 10
            },
            "end": {
              "line": 28,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "step",
          "description": "step for changing the input (referencing to `min` or `0`)",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 34,
              "column": 10
            },
            "end": {
              "line": 37,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "start-at",
          "description": "start where to increment the value",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 43,
              "column": 10
            },
            "end": {
              "line": 45,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "value-as-number",
          "description": "value of the input",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 50,
              "column": 10
            },
            "end": {
              "line": 54,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "default",
          "description": "default value of the value, when it does not validate",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 70,
              "column": 10
            },
            "end": {
              "line": 73,
              "column": 11
            }
          },
          "metadata": {},
          "type": "Object | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "saturate",
          "description": "if true, the value does not revolve the range according to the maximum or the minimum",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 67,
              "column": 10
            },
            "end": {
              "line": 70,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "use-negative-zero",
          "description": "if true, the value will break on 0 to -0",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 75,
              "column": 10
            },
            "end": {
              "line": 78,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "no-clamp",
          "description": "if true, the value does not clamp according to the given step",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 83,
              "column": 10
            },
            "end": {
              "line": 86,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "name",
          "description": "name of the input",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 38,
              "column": 10
            },
            "end": {
              "line": 40,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "title",
          "description": "description for the element and can be used as a hint for invalid values",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 45,
              "column": 10
            },
            "end": {
              "line": 48,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "property-for-value",
          "description": "defines the property that should be used for the value",
          "sourceRange": {
            "start": {
              "line": 123,
              "column": 10
            },
            "end": {
              "line": 126,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "value",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 115,
              "column": 10
            },
            "end": {
              "line": 118,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "disabled",
          "description": "disables the input",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 78,
              "column": 10
            },
            "end": {
              "line": 82,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "invalid",
          "description": "required attribute",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 87,
              "column": 10
            },
            "end": {
              "line": 92,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "required",
          "description": "required attribute",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 97,
              "column": 10
            },
            "end": {
              "line": 102,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "value-is-set",
          "description": "is true when the value is set",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 107,
              "column": 10
            },
            "end": {
              "line": 111,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "type",
          "description": "type of the input",
          "sourceRange": {
            "start": {
              "line": 79,
              "column": 10
            },
            "end": {
              "line": 82,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "input",
          "description": "the immediate input string",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 136,
              "column": 10
            },
            "end": {
              "line": 140,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "validation-message",
          "description": "message to set on the input to show if the input does not validate",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 145,
              "column": 10
            },
            "end": {
              "line": 148,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "placeholder",
          "description": "the placeholder string",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 153,
              "column": 10
            },
            "end": {
              "line": 155,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "minlength",
          "description": "the minlength of the input",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 160,
              "column": 10
            },
            "end": {
              "line": 162,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "auto-resize",
          "description": "if true, the width will change when typing",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 167,
              "column": 10
            },
            "end": {
              "line": 170,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "pad-length",
          "description": "length to pad the string (with `0`) according to the total amount of numbers",
          "sourceRange": {
            "start": {
              "line": 87,
              "column": 10
            },
            "end": {
              "line": 89,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "auto-padding",
          "description": "enables auto padding",
          "sourceRange": {
            "start": {
              "line": 95,
              "column": 10
            },
            "end": {
              "line": 97,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "mixins": [
        "IntlNumberFormatMixin",
        "RangeMixin",
        "InputPattern"
      ]
    },
    {
      "description": "mixin to create a integer-input",
      "summary": "",
      "path": "integer-input.html",
      "properties": [
        {
          "name": "locale",
          "type": "string | null | undefined",
          "description": "The current locale",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 32,
              "column": 10
            },
            "end": {
              "line": 35,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "decimalSeparator",
          "type": "string | null | undefined",
          "description": "locale separator for local decimal values",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 40,
              "column": 10
            },
            "end": {
              "line": 43,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "String"
            }
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "groupingSeparator",
          "type": "string | null | undefined",
          "description": "locale separator for grouping decimal values",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 48,
              "column": 10
            },
            "end": {
              "line": 51,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "String"
            }
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "minimumFractionDigits",
          "type": "number | null | undefined",
          "description": "minimum digits right to the decimal separator",
          "privacy": "public",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 102,
              "column": 10
            },
            "end": {
              "line": 105,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "maximumFractionDigits",
          "type": "number | null | undefined",
          "description": "The maximum number of fraction digits to use",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 31,
              "column": 10
            },
            "end": {
              "line": 35,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Number"
            }
          },
          "defaultValue": "0"
        },
        {
          "name": "minimumIntegerDigits",
          "type": "number | null | undefined",
          "description": "minimum digits left to the decimal separator to pad",
          "privacy": "public",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 110,
              "column": 10
            },
            "end": {
              "line": 113,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "minimumSignificantDigits",
          "type": "number | null | undefined",
          "description": "The minimum number of significant digits to use. Possible values are from 1 to 21; the default is 1.",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 77,
              "column": 10
            },
            "end": {
              "line": 79,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "maximumSignificantDigits",
          "type": "number | null | undefined",
          "description": "The maximum number of significant digits to use. Possible values are from 1 to 21; the default is minimumSignificantDigits.",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 84,
              "column": 10
            },
            "end": {
              "line": 86,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "unit",
          "type": "string | null | undefined",
          "description": "unit of the output (only used when `number-style=\"decimal\"`)",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 91,
              "column": 10
            },
            "end": {
              "line": 93,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "unitSeparator",
          "type": "string | null | undefined",
          "description": "the separator to separate value and unit (default: '\\u202F')",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 98,
              "column": 10
            },
            "end": {
              "line": 101,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"â€¯\"",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "alwaysSign",
          "type": "boolean | null | undefined",
          "description": "always put the sign at the beginning",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 106,
              "column": 10
            },
            "end": {
              "line": 108,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "numberStyle",
          "type": "string | null | undefined",
          "description": "The formatting style to use. Possible values are \"decimal\" for plain number formatting, \"currency\" for currency formatting, and \"percent\" for percent formatting; the default is \"decimal\".\nnotice: min, max and step are not in percent (so e.g. if step is 0.01, it means that the step is 1%)",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 114,
              "column": 10
            },
            "end": {
              "line": 117,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"decimal\"",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "useGrouping",
          "type": "boolean | null | undefined",
          "description": "if true the number will be grouped according to the locale.",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 122,
              "column": 10
            },
            "end": {
              "line": 124,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "currency",
          "type": "string | null | undefined",
          "description": "The currency to use in currency formatting. Possible values are the ISO 4217 currency codes, such as \"USD\" for the US dollar, \"EUR\" for the euro, or \"CNY\" for the Chinese RMB â€” see http://www.currency-iso.org/en/home/tables/table-a1.html. There is no default value; if the style is \"currency\", the currency property must be provided.",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 129,
              "column": 10
            },
            "end": {
              "line": 131,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "currencyDisplay",
          "type": "string | null | undefined",
          "description": "How to display the currency in currency formatting. Possible values are \"symbol\" to use a localized currency symbol such as â‚¬, \"code\" to use the ISO currency code, \"name\" to use a localized currency name such as \"dollar\"; the default is \"symbol\".",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 136,
              "column": 10
            },
            "end": {
              "line": 138,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "_numberOptions",
          "type": "number | null | undefined",
          "description": "number format options",
          "privacy": "protected",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 143,
              "column": 10
            },
            "end": {
              "line": 146,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "formatNumber",
          "type": "Function | null | undefined",
          "description": "number format function",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 151,
              "column": 10
            },
            "end": {
              "line": 155,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true,
              "attributeType": "Function"
            }
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "parseNumber",
          "type": "Function | null | undefined",
          "description": "function to parse the input",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 160,
              "column": 10
            },
            "end": {
              "line": 164,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true,
              "attributeType": "Function"
            }
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "min",
          "type": "number",
          "description": "minimal input",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 19,
              "column": 10
            },
            "end": {
              "line": 21,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "max",
          "type": "number",
          "description": "maximal input",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 26,
              "column": 10
            },
            "end": {
              "line": 28,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "step",
          "type": "number",
          "description": "step for changing the input (referencing to `min` or `0`)",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 23,
              "column": 10
            },
            "end": {
              "line": 27,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_stepChanged\"",
              "attributeType": "Number"
            }
          },
          "defaultValue": "1"
        },
        {
          "name": "startAt",
          "type": "number",
          "description": "start where to increment the value",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 43,
              "column": 10
            },
            "end": {
              "line": 45,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "valueAsNumber",
          "type": "number",
          "description": "value of the input",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 50,
              "column": 10
            },
            "end": {
              "line": 54,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_valueAsNumberChanged\"",
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "default",
          "type": "Object | null | undefined",
          "description": "default value of the value, when it does not validate",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 70,
              "column": 10
            },
            "end": {
              "line": 73,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_defaultChanged\"",
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "saturate",
          "type": "boolean",
          "description": "if true, the value does not revolve the range according to the maximum or the minimum",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 67,
              "column": 10
            },
            "end": {
              "line": 70,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_updateValueAsNumber\"",
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "useNegativeZero",
          "type": "boolean",
          "description": "if true, the value will break on 0 to -0",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 75,
              "column": 10
            },
            "end": {
              "line": 78,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_updateValueAsNumber\"",
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "noClamp",
          "type": "boolean",
          "description": "if true, the value does not clamp according to the given step",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 83,
              "column": 10
            },
            "end": {
              "line": 86,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_updateValueAsNumber\"",
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "name",
          "type": "string | null | undefined",
          "description": "name of the input",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 38,
              "column": 10
            },
            "end": {
              "line": 40,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "title",
          "type": "string | null | undefined",
          "description": "description for the element and can be used as a hint for invalid values",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 45,
              "column": 10
            },
            "end": {
              "line": 48,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "propertyForValue",
          "type": "string | null | undefined",
          "description": "defines the property that should be used for the value",
          "privacy": "public",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 123,
              "column": 10
            },
            "end": {
              "line": 126,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"valueAsNumber\"",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "value",
          "type": "number | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 115,
              "column": 10
            },
            "end": {
              "line": 118,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "disabled",
          "type": "boolean | null | undefined",
          "description": "disables the input",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 78,
              "column": 10
            },
            "end": {
              "line": 82,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "invalid",
          "type": "boolean | null | undefined",
          "description": "required attribute",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 87,
              "column": 10
            },
            "end": {
              "line": 92,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "required",
          "type": "boolean | null | undefined",
          "description": "required attribute",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 97,
              "column": 10
            },
            "end": {
              "line": 102,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "valueIsSet",
          "type": "boolean | null | undefined",
          "description": "is true when the value is set",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 107,
              "column": 10
            },
            "end": {
              "line": 111,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_isSet",
          "type": "Function | null | undefined",
          "description": "defines whether the value is set",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 116,
              "column": 10
            },
            "end": {
              "line": 118,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Function"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_validate",
          "type": "Function | null | undefined",
          "description": "validates the value (when required)",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 123,
              "column": 10
            },
            "end": {
              "line": 125,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Function"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "type",
          "type": "string | null | undefined",
          "description": "type of the input",
          "privacy": "public",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 79,
              "column": 10
            },
            "end": {
              "line": 82,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "String"
            }
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "input",
          "type": "string | null | undefined",
          "description": "the immediate input string",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 136,
              "column": 10
            },
            "end": {
              "line": 140,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_inputChanged\"",
              "attributeType": "String"
            }
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "validationMessage",
          "type": "string | null | undefined",
          "description": "message to set on the input to show if the input does not validate",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 145,
              "column": 10
            },
            "end": {
              "line": 148,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"setCustomValidity\"",
              "attributeType": "String"
            }
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "placeholder",
          "type": "string | null | undefined",
          "description": "the placeholder string",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 153,
              "column": 10
            },
            "end": {
              "line": 155,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "minlength",
          "type": "number | null | undefined",
          "description": "the minlength of the input",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 160,
              "column": 10
            },
            "end": {
              "line": 162,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "autoResize",
          "type": "boolean | null | undefined",
          "description": "if true, the width will change when typing",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 167,
              "column": 10
            },
            "end": {
              "line": 170,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_debouncedResizeWidth\"",
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "_minlengthString",
          "type": "string | null | undefined",
          "description": "string that is used to compute the minimal width of the input",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 175,
              "column": 10
            },
            "end": {
              "line": 177,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "padLength",
          "type": "number | null | undefined",
          "description": "length to pad the string (with `0`) according to the total amount of numbers",
          "privacy": "public",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 87,
              "column": 10
            },
            "end": {
              "line": 89,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "autoPadding",
          "type": "boolean",
          "description": "enables auto padding",
          "privacy": "public",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 95,
              "column": 10
            },
            "end": {
              "line": 97,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "NumberInputMixin"
        }
      ],
      "methods": [
        {
          "name": "_localeChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 174,
              "column": 6
            },
            "end": {
              "line": 236,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "locale"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "_computeNumberOptions",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 238,
              "column": 6
            },
            "end": {
              "line": 281,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "minimumIntegerDigits"
            },
            {
              "name": "minimumFractionDigits"
            },
            {
              "name": "maximumFractionDigits"
            },
            {
              "name": "minimumSignificantDigits"
            },
            {
              "name": "maximumSignificantDigits"
            },
            {
              "name": "useGrouping"
            },
            {
              "name": "style"
            },
            {
              "name": "currency"
            },
            {
              "name": "currencyDisplay"
            }
          ],
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "_computeFormatNumber",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 283,
              "column": 6
            },
            "end": {
              "line": 310,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "locale"
            },
            {
              "name": "numberOptions"
            },
            {
              "name": "unit"
            },
            {
              "name": "unitSeparator"
            },
            {
              "name": "alwaysSign"
            }
          ],
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "_computeParseNumber",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 312,
              "column": 6
            },
            "end": {
              "line": 398,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "decimalSeparator"
            },
            {
              "name": "groupingSeparator"
            },
            {
              "name": "numberOptions"
            }
          ],
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "_minMaxChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 96,
              "column": 6
            },
            "end": {
              "line": 105,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "min"
            },
            {
              "name": "max"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "_valueAsNumberChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 185,
              "column": 6
            },
            "end": {
              "line": 192,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "valueAsNumber"
            },
            {
              "name": "oldValue"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_defaultChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 194,
              "column": 6
            },
            "end": {
              "line": 199,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "def"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_computeDefaultValue",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 201,
              "column": 6
            },
            "end": {
              "line": 206,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_checkValueAsNumber",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 136,
              "column": 6
            },
            "end": {
              "line": 161,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            },
            {
              "name": "oldValue"
            }
          ],
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "_updateValueAsNumber",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 163,
              "column": 6
            },
            "end": {
              "line": 168,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "_checkStep",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 170,
              "column": 6
            },
            "end": {
              "line": 187,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            },
            {
              "name": "step"
            }
          ],
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "_safeMult",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 47,
              "column": 6
            },
            "end": {
              "line": 49,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "a"
            },
            {
              "name": "b"
            }
          ]
        },
        {
          "name": "_safeAdd",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 43,
              "column": 6
            },
            "end": {
              "line": 45,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "a"
            },
            {
              "name": "b"
            }
          ]
        },
        {
          "name": "_stepChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 209,
              "column": 6
            },
            "end": {
              "line": 217,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "step"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "increase",
          "description": "Increase value by step",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 222,
              "column": 6
            },
            "end": {
              "line": 224,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "decrease",
          "description": "Decrease value by step",
          "privacy": "public",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 229,
              "column": 6
            },
            "end": {
              "line": 231,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "_increm",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 233,
              "column": 6
            },
            "end": {
              "line": 265,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "step"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "_shouldPropertyChange",
          "description": "overwritten of polymer to handle -0",
          "privacy": "protected",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 270,
              "column": 6
            },
            "end": {
              "line": 276,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property"
            },
            {
              "name": "value"
            },
            {
              "name": "old"
            }
          ],
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "_attachDom",
          "description": "attach dom with `delegatesFocus: true` so that the element is also focussed while its's children are too, and to autofocus to first tabable",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 22,
              "column": 6
            },
            "end": {
              "line": 31,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dom"
            }
          ],
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 188,
              "column": 6
            },
            "end": {
              "line": 194,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "_defaultIsSet",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 147,
              "column": 6
            },
            "end": {
              "line": 149,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "Object",
              "description": "value to test"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "true, if the value is set"
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_defaultValidate",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 159,
              "column": 6
            },
            "end": {
              "line": 161,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "isSet",
              "type": "Function",
              "description": "The function that defines if the value is set"
            },
            {
              "name": "value",
              "type": "Object",
              "description": "value to validate"
            },
            {
              "name": "required",
              "type": "Boolean",
              "description": "if true, the value is required"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "true, if the value is valid"
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_computeInvalid",
          "description": "defines whether the value is set",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 170,
              "column": 6
            },
            "end": {
              "line": 172,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "validate"
            },
            {
              "name": "isSet"
            },
            {
              "name": "value"
            },
            {
              "name": "required"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_computeValueIsSet",
          "description": "defines whether the value is set",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 179,
              "column": 6
            },
            "end": {
              "line": 181,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "isSet"
            },
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_valueChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 171,
              "column": 6
            },
            "end": {
              "line": 183,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            },
            {
              "name": "oldValue"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_createReflectPropertyToValueObserver",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 200,
              "column": 6
            },
            "end": {
              "line": 210,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "prop"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_reflectPropertyToValue",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 212,
              "column": 6
            },
            "end": {
              "line": 214,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_reflectValueToProperty",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 216,
              "column": 6
            },
            "end": {
              "line": 218,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "validate",
          "description": "validates the input for iron-form",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 364,
              "column": 6
            },
            "end": {
              "line": 367,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "reset",
          "description": "reset the value",
          "privacy": "public",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 211,
              "column": 6
            },
            "end": {
              "line": 213,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "disconnectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 196,
              "column": 6
            },
            "end": {
              "line": 199,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "_delayedAddEventListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 201,
              "column": 6
            },
            "end": {
              "line": 216,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "_addEventListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 218,
              "column": 6
            },
            "end": {
              "line": 225,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "_removeEventListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 227,
              "column": 6
            },
            "end": {
              "line": 234,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "_checkKeycode",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 140,
              "column": 6
            },
            "end": {
              "line": 155,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_inputChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 157,
              "column": 6
            },
            "end": {
              "line": 169,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "input"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_confirmInput",
          "description": "update manually the value with the native input",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 218,
              "column": 6
            },
            "end": {
              "line": 231,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_updateInput",
          "description": "update manually the native input with the given value",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 236,
              "column": 6
            },
            "end": {
              "line": 249,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            },
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_computeMinlengthString",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 257,
              "column": 6
            },
            "end": {
              "line": 268,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "resize",
          "description": "called automatically when static `_minlengthString` or visibilityState changes, but can be called manually to resize the minwidth of the input, when the input is for example initially hidden",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 315,
              "column": 6
            },
            "end": {
              "line": 330,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "_debouncedResizeWidth",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 332,
              "column": 6
            },
            "end": {
              "line": 338,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "_resizeWidth",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 340,
              "column": 6
            },
            "end": {
              "line": 342,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "focus",
          "description": "focus the input element",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 347,
              "column": 6
            },
            "end": {
              "line": 351,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "blur",
          "description": "removes focus from input",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 356,
              "column": 6
            },
            "end": {
              "line": 359,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "select",
          "description": "selects the input text in the element, and focuses it so the user can subsequently replace the whole entry",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 372,
              "column": 6
            },
            "end": {
              "line": 374,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "click",
          "description": "simulates a click on the element",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 379,
              "column": 6
            },
            "end": {
              "line": 381,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "setCustomValidity",
          "description": "sets on the native input a validity message",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 387,
              "column": 6
            },
            "end": {
              "line": 389,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "msg",
              "type": "String",
              "description": "the message to set"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "reportValidity",
          "description": "reports the validity state of the native input",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 395,
              "column": 6
            },
            "end": {
              "line": 397,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Boolean",
            "desc": "validity state"
          },
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "_formatNumberChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 251,
              "column": 6
            },
            "end": {
              "line": 255,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_computeType",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 270,
              "column": 6
            },
            "end": {
              "line": 282,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "numberOptions"
            },
            {
              "name": "decimalSeparator"
            },
            {
              "name": "unit"
            },
            {
              "name": "alwaysSign"
            },
            {
              "name": "padLength"
            },
            {
              "name": "autoPadding"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_computeMinimumIntegerDigits",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 284,
              "column": 6
            },
            "end": {
              "line": 311,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "autoPadding"
            },
            {
              "name": "padLength"
            },
            {
              "name": "def"
            },
            {
              "name": "startAt"
            },
            {
              "name": "min"
            },
            {
              "name": "max"
            },
            {
              "name": "step"
            },
            {
              "name": "numberStyle"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_computeMinimumFractionDigits",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 39,
              "column": 6
            },
            "end": {
              "line": 41,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 13,
          "column": 2
        },
        "end": {
          "line": 51,
          "column": 3
        }
      },
      "privacy": "public",
      "name": "IntegerInputMixin",
      "attributes": [
        {
          "name": "locale",
          "description": "The current locale",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 32,
              "column": 10
            },
            "end": {
              "line": 35,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "decimal-separator",
          "description": "locale separator for local decimal values",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 40,
              "column": 10
            },
            "end": {
              "line": 43,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "grouping-separator",
          "description": "locale separator for grouping decimal values",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 48,
              "column": 10
            },
            "end": {
              "line": 51,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "minimum-fraction-digits",
          "description": "minimum digits right to the decimal separator",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 102,
              "column": 10
            },
            "end": {
              "line": 105,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "maximum-fraction-digits",
          "description": "The maximum number of fraction digits to use",
          "sourceRange": {
            "start": {
              "line": 31,
              "column": 10
            },
            "end": {
              "line": 35,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "minimum-integer-digits",
          "description": "minimum digits left to the decimal separator to pad",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 110,
              "column": 10
            },
            "end": {
              "line": 113,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "minimum-significant-digits",
          "description": "The minimum number of significant digits to use. Possible values are from 1 to 21; the default is 1.",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 77,
              "column": 10
            },
            "end": {
              "line": 79,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "maximum-significant-digits",
          "description": "The maximum number of significant digits to use. Possible values are from 1 to 21; the default is minimumSignificantDigits.",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 84,
              "column": 10
            },
            "end": {
              "line": 86,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "unit",
          "description": "unit of the output (only used when `number-style=\"decimal\"`)",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 91,
              "column": 10
            },
            "end": {
              "line": 93,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "unit-separator",
          "description": "the separator to separate value and unit (default: '\\u202F')",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 98,
              "column": 10
            },
            "end": {
              "line": 101,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "always-sign",
          "description": "always put the sign at the beginning",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 106,
              "column": 10
            },
            "end": {
              "line": 108,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "number-style",
          "description": "The formatting style to use. Possible values are \"decimal\" for plain number formatting, \"currency\" for currency formatting, and \"percent\" for percent formatting; the default is \"decimal\".\nnotice: min, max and step are not in percent (so e.g. if step is 0.01, it means that the step is 1%)",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 114,
              "column": 10
            },
            "end": {
              "line": 117,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "use-grouping",
          "description": "if true the number will be grouped according to the locale.",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 122,
              "column": 10
            },
            "end": {
              "line": 124,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "currency",
          "description": "The currency to use in currency formatting. Possible values are the ISO 4217 currency codes, such as \"USD\" for the US dollar, \"EUR\" for the euro, or \"CNY\" for the Chinese RMB â€” see http://www.currency-iso.org/en/home/tables/table-a1.html. There is no default value; if the style is \"currency\", the currency property must be provided.",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 129,
              "column": 10
            },
            "end": {
              "line": 131,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "currency-display",
          "description": "How to display the currency in currency formatting. Possible values are \"symbol\" to use a localized currency symbol such as â‚¬, \"code\" to use the ISO currency code, \"name\" to use a localized currency name such as \"dollar\"; the default is \"symbol\".",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 136,
              "column": 10
            },
            "end": {
              "line": 138,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "format-number",
          "description": "number format function",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 151,
              "column": 10
            },
            "end": {
              "line": 155,
              "column": 11
            }
          },
          "metadata": {},
          "type": "Function | null | undefined",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "parse-number",
          "description": "function to parse the input",
          "sourceRange": {
            "file": "../property-mixins/intl-number-format-mixin.html",
            "start": {
              "line": 160,
              "column": 10
            },
            "end": {
              "line": 164,
              "column": 11
            }
          },
          "metadata": {},
          "type": "Function | null | undefined",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "min",
          "description": "minimal input",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 19,
              "column": 10
            },
            "end": {
              "line": 21,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "max",
          "description": "maximal input",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 26,
              "column": 10
            },
            "end": {
              "line": 28,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "step",
          "description": "step for changing the input (referencing to `min` or `0`)",
          "sourceRange": {
            "start": {
              "line": 23,
              "column": 10
            },
            "end": {
              "line": 27,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "start-at",
          "description": "start where to increment the value",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 43,
              "column": 10
            },
            "end": {
              "line": 45,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "value-as-number",
          "description": "value of the input",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 50,
              "column": 10
            },
            "end": {
              "line": 54,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "default",
          "description": "default value of the value, when it does not validate",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 70,
              "column": 10
            },
            "end": {
              "line": 73,
              "column": 11
            }
          },
          "metadata": {},
          "type": "Object | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "saturate",
          "description": "if true, the value does not revolve the range according to the maximum or the minimum",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 67,
              "column": 10
            },
            "end": {
              "line": 70,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "use-negative-zero",
          "description": "if true, the value will break on 0 to -0",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 75,
              "column": 10
            },
            "end": {
              "line": 78,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "no-clamp",
          "description": "if true, the value does not clamp according to the given step",
          "sourceRange": {
            "file": "../property-mixins/range-mixin.html",
            "start": {
              "line": 83,
              "column": 10
            },
            "end": {
              "line": 86,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "name",
          "description": "name of the input",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 38,
              "column": 10
            },
            "end": {
              "line": 40,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "title",
          "description": "description for the element and can be used as a hint for invalid values",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 45,
              "column": 10
            },
            "end": {
              "line": 48,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "property-for-value",
          "description": "defines the property that should be used for the value",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 123,
              "column": 10
            },
            "end": {
              "line": 126,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "value",
          "description": "",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 115,
              "column": 10
            },
            "end": {
              "line": 118,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "disabled",
          "description": "disables the input",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 78,
              "column": 10
            },
            "end": {
              "line": 82,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "invalid",
          "description": "required attribute",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 87,
              "column": 10
            },
            "end": {
              "line": 92,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "required",
          "description": "required attribute",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 97,
              "column": 10
            },
            "end": {
              "line": 102,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "value-is-set",
          "description": "is true when the value is set",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 107,
              "column": 10
            },
            "end": {
              "line": 111,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "type",
          "description": "type of the input",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 79,
              "column": 10
            },
            "end": {
              "line": 82,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "input",
          "description": "the immediate input string",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 136,
              "column": 10
            },
            "end": {
              "line": 140,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "validation-message",
          "description": "message to set on the input to show if the input does not validate",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 145,
              "column": 10
            },
            "end": {
              "line": 148,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "placeholder",
          "description": "the placeholder string",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 153,
              "column": 10
            },
            "end": {
              "line": 155,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "minlength",
          "description": "the minlength of the input",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 160,
              "column": 10
            },
            "end": {
              "line": 162,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "auto-resize",
          "description": "if true, the width will change when typing",
          "sourceRange": {
            "file": "../input-picker-pattern/input-pattern.html",
            "start": {
              "line": 167,
              "column": 10
            },
            "end": {
              "line": 170,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "InputPattern"
        },
        {
          "name": "pad-length",
          "description": "length to pad the string (with `0`) according to the total amount of numbers",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 87,
              "column": 10
            },
            "end": {
              "line": 89,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "auto-padding",
          "description": "enables auto padding",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 95,
              "column": 10
            },
            "end": {
              "line": 97,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "NumberInputMixin"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "mixins": [
        "NumberInputMixin"
      ]
    }
  ]
}
