{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "`<color-element>` adds a color selector to your page using Polymer.\n\n  ```html\n    <color-element value=\"{{color}}\"></color-element>\n  ```\nCustom property | Description | Default\n----------------|-------------|----------\n`--transparency-pattern` | background pattern for the transparency layer | linear-gradient(45deg, rgba(0,0,0,0.15) 25%, transparent 25%, transparent 75%, rgba(0,0,0,0.15) 75%, rgba(0,0,0,0.15)), linear-gradient(45deg, rgba(0,0,0,0.15) 25%, transparent 25%, transparent 75%, rgba(0,0,0,0.15) 75%, rgba(0,0,0,0.15)))\n`--transparency-pattern-size` | size transparency pattern | 12px\n`--color-element-badge-radius` | border-radius of the badge | --input-picker-border-radius, 6px\n`--color-element-height` | height of the selector badge and the alpha- and the hue-slider| 184px\n`--color-element-width` | width of the selector badge | 184px\n`--color-slider-width` | width of the alpha- and the hue-slider | 16px\n`--color-slider-padding` | padding of the alpha- and the hue-slider | 2px\n`--color-pin-radius` | radius of the color pin | 3px\n`--color-selector-mix-blend-mode` | mix-blend-mode of the selectors (sliders and color pin) | exclusion\n`--color-element` | mixin applied to the color element | {}\n\n Have a look at [input-picker-pattern#input-shared-style](https://github.com/fooloomanzoo/input-picker-pattern#input-shared-style) to see the used style-properties.",
      "summary": "",
      "path": "color-element.html",
      "properties": [],
      "methods": [],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/color-element.html",
          "description": "Color Element"
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 635,
          "column": 2
        },
        "end": {
          "line": 664,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "ColorElement",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "color-element",
      "mixins": [
        "ColorElementPattern",
        "ColorFormMixin",
        "FormElementMixin"
      ]
    },
    {
      "description": "`color-picker` is a picker for color for **[Polymer](https://github.com/Polymer/polymer)** that can use the native input, too. If the **native** picker is choosen and is not supported, this element uses the **polyfill** datetime-picker. The `<calendar-element>` and the `<time-element>` will come in place if the native picker is not available or is not explicitly wanted. `css-value` will give you directly the css-string.\n\n ```html\n   <color-picker value=\"{{value}}\"></color-picker>\n ```\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--transparency-pattern` | background pattern for the transparency layer | linear-gradient(45deg, rgba(0,0,0,0.15) 25%, transparent 25%, transparent 75%, rgba(0,0,0,0.15) 75%, rgba(0,0,0,0.15)), linear-gradient(45deg, rgba(0,0,0,0.15) 25%, transparent 25%, transparent 75%, rgba(0,0,0,0.15) 75%, rgba(0,0,0,0.15)))\n`--transparency-pattern-size` | size transparency pattern | 12px\n`--color-element-badge-radius` | border-radius of the badge | --input-picker-border-radius, 6px\n`--color-element-height` | height of the selector badge and the alpha- and the hue-slider| 184px\n`--color-element-width` | width of the selector badge | 184px\n`--color-slider-width` | width of the alpha- and the hue-slider | 16px\n`--color-slider-padding` | padding of the alpha- and the hue-slider | 2px\n`--color-pin-radius` | radius of the color pin | 3px\n`--color-selector-mix-blend-mode` | mix-blend-mode of the selectors (sliders and color pin) | exclusion\n`--color-element` | mixin applied to the color element | {}\n\n Have a look at `<color-element>` and [input-picker-pattern#input-shared-style](https://github.com/fooloomanzoo/input-picker-pattern#input-shared-style) to see the used style-properties.",
      "summary": "",
      "path": "color-picker.html",
      "properties": [
        {
          "name": "propertyForValue",
          "type": "string | null | undefined",
          "description": "defines the property that should be used for the value",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 53,
              "column": 10
            },
            "end": {
              "line": 56,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_createReflectPropertyToValueObserver\"",
              "attributeType": "String"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_recentcolorheight",
          "type": "number | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 135,
              "column": 10
            },
            "end": {
              "line": 137,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "ColorPickerPattern"
        },
        {
          "name": "_recentcolorwidth",
          "type": "number | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 139,
              "column": 10
            },
            "end": {
              "line": 141,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "ColorPickerPattern"
        },
        {
          "name": "name",
          "type": "string | null | undefined",
          "description": "name of the input",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 38,
              "column": 10
            },
            "end": {
              "line": 40,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "title",
          "type": "string | null | undefined",
          "description": "description for the element and can be used as a hint for invalid values",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 45,
              "column": 10
            },
            "end": {
              "line": 48,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "value",
          "type": "Object | null | undefined",
          "description": "value of the input",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 61,
              "column": 10
            },
            "end": {
              "line": 65,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_valueChanged\"",
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "default",
          "type": "Object | null | undefined",
          "description": "default value of the value, when it does not validate",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 70,
              "column": 10
            },
            "end": {
              "line": 73,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_defaultChanged\"",
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "disabled",
          "type": "boolean | null | undefined",
          "description": "disables the input",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 78,
              "column": 10
            },
            "end": {
              "line": 82,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "invalid",
          "type": "boolean | null | undefined",
          "description": "required attribute",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 87,
              "column": 10
            },
            "end": {
              "line": 92,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "required",
          "type": "boolean | null | undefined",
          "description": "required attribute",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 97,
              "column": 10
            },
            "end": {
              "line": 102,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "valueIsSet",
          "type": "boolean | null | undefined",
          "description": "is true when the value is set",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 107,
              "column": 10
            },
            "end": {
              "line": 111,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_isSet",
          "type": "Function | null | undefined",
          "description": "defines whether the value is set",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 116,
              "column": 10
            },
            "end": {
              "line": 119,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Function"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_validate",
          "type": "Function | null | undefined",
          "description": "validates the value (when required)",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 124,
              "column": 10
            },
            "end": {
              "line": 127,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Function"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "native",
          "type": "boolean | null | undefined",
          "description": "Set to `true` to use the native input, if it available",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-picker-pattern.html",
            "start": {
              "line": 166,
              "column": 10
            },
            "end": {
              "line": 169,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "nativeOnMobile",
          "type": "boolean | null | undefined",
          "description": "Set to `true` to use the native input automatically on mobile devices, if it available",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-picker-pattern.html",
            "start": {
              "line": 174,
              "column": 10
            },
            "end": {
              "line": 177,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_nativeOnMobileChanged\"",
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "mobileUserAgentTestString",
          "type": "string | null | undefined",
          "description": "When `nativeOnMobile` is set to `true` this string is used to test the userAgent for a mobile device",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-picker-pattern.html",
            "start": {
              "line": 182,
              "column": 10
            },
            "end": {
              "line": 186,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_nativeOnMobileChanged\"",
              "attributeType": "String"
            }
          },
          "defaultValue": "\"mM]obi|[tT]ablet|[aA]ndroid\"",
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "opened",
          "type": "boolean | null | undefined",
          "description": "if `true` the picker is opened",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-picker-pattern.html",
            "start": {
              "line": 191,
              "column": 10
            },
            "end": {
              "line": 196,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "horizontalAlign",
          "type": "string | null | undefined",
          "description": "The orientation against which to align the element horizontally\nrelative to the related input element. Possible values are \"left\", \"right\", \"center\", \"auto\". (comparable to `iron-fit-behavior` and its `no-overlap`-attribute)",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-picker-pattern.html",
            "start": {
              "line": 202,
              "column": 10
            },
            "end": {
              "line": 206,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"auto\"",
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "verticalAlign",
          "type": "string | null | undefined",
          "description": "The orientation against which to align the element vertically\nrelative to the related input element. Possible values are \"top\", \"bottom\", \"middle\", \"auto\". (comparable to `iron-fit-behavior` and its `no-overlap`-attribute)",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-picker-pattern.html",
            "start": {
              "line": 212,
              "column": 10
            },
            "end": {
              "line": 216,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"auto\"",
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "autoConfirm",
          "type": "boolean | null | undefined",
          "description": "Set to `true` to make the input auto-confirming",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-picker-pattern.html",
            "start": {
              "line": 221,
              "column": 10
            },
            "end": {
              "line": 224,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_autoConfirmChanged\"",
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "noCancelOnEscKey",
          "type": "boolean | null | undefined",
          "description": "Set to `true` to disable canceling the overlay with the ESC key.",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-picker-pattern.html",
            "start": {
              "line": 229,
              "column": 10
            },
            "end": {
              "line": 232,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "noCancelOnOutsideClick",
          "type": "boolean | null | undefined",
          "description": "Set to `true` to disable canceling the dropdown by clicking outside the picker.",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-picker-pattern.html",
            "start": {
              "line": 237,
              "column": 10
            },
            "end": {
              "line": 240,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "noCloseOnPickerOpened",
          "type": "boolean | null | undefined",
          "description": "Set to `true` to disable closing the dropdown when opening another picker.",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-picker-pattern.html",
            "start": {
              "line": 245,
              "column": 10
            },
            "end": {
              "line": 248,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "noTip",
          "type": "boolean | null | undefined",
          "description": "Set to `true` to disable the tip of the picker",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-picker-pattern.html",
            "start": {
              "line": 253,
              "column": 10
            },
            "end": {
              "line": 256,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "confirmedValue",
          "type": "Object | null | undefined",
          "description": "The confirmed value. When `auto-confirm` is not set, the value will only change, when you confirm.",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-picker-pattern.html",
            "start": {
              "line": 261,
              "column": 10
            },
            "end": {
              "line": 264,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "_hasNative",
          "type": "?",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 258,
              "column": 6
            },
            "end": {
              "line": 260,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        }
      ],
      "methods": [
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 145,
              "column": 6
            },
            "end": {
              "line": 150,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorPickerPattern"
        },
        {
          "name": "redraw",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 152,
              "column": 6
            },
            "end": {
              "line": 155,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorPickerPattern"
        },
        {
          "name": "_resizeBadge",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 157,
              "column": 6
            },
            "end": {
              "line": 177,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorPickerPattern"
        },
        {
          "name": "_resetValues",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 179,
              "column": 6
            },
            "end": {
              "line": 184,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorPickerPattern"
        },
        {
          "name": "_confirmedValueChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/input-picker-pattern.html",
            "start": {
              "line": 479,
              "column": 6
            },
            "end": {
              "line": 485,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "confirmedValue"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "_drawConfimedColorBadge",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 195,
              "column": 6
            },
            "end": {
              "line": 197,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            },
            {
              "name": "width"
            },
            {
              "name": "height"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorPickerPattern"
        },
        {
          "name": "open",
          "description": "open the picker",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-picker-pattern.html",
            "start": {
              "line": 429,
              "column": 6
            },
            "end": {
              "line": 431,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "_onDblClick",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 206,
              "column": 6
            },
            "end": {
              "line": 208,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorPickerPattern"
        },
        {
          "name": "_addEventListenerToNode",
          "description": "Add the event listener to the node if it is a gestures event.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/gesture-event-listeners.html",
            "start": {
              "line": 55,
              "column": 6
            },
            "end": {
              "line": 59,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "!Node",
              "description": "Node to add event listener to"
            },
            {
              "name": "eventName",
              "type": "string",
              "description": "Name of event"
            },
            {
              "name": "handler",
              "type": "function (!Event): void",
              "description": "Listener function to add"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.GestureEventListeners"
        },
        {
          "name": "_removeEventListenerFromNode",
          "description": "Remove the event listener to the node if it is a gestures event.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/gesture-event-listeners.html",
            "start": {
              "line": 69,
              "column": 6
            },
            "end": {
              "line": 73,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "!Node",
              "description": "Node to remove event listener from"
            },
            {
              "name": "eventName",
              "type": "string",
              "description": "Name of event"
            },
            {
              "name": "handler",
              "type": "function (!Event): void",
              "description": "Listener function to remove"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.GestureEventListeners"
        },
        {
          "name": "_attachDom",
          "description": "attach dom with `delegatesFocus: true` so that the element is also focussed while its's children are too, and to autofocus to first tabable",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 22,
              "column": 6
            },
            "end": {
              "line": 31,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dom"
            }
          ],
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-picker-pattern.html",
            "start": {
              "line": 285,
              "column": 6
            },
            "end": {
              "line": 289,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "_defaultIsSet",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 149,
              "column": 6
            },
            "end": {
              "line": 151,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "Object",
              "description": "value to test"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "true, if the value is set"
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_defaultValidate",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 160,
              "column": 6
            },
            "end": {
              "line": 162,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "Object",
              "description": "value to validate"
            },
            {
              "name": "required",
              "type": "Boolean",
              "description": "if true, the value is required"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "true, if the value is valid"
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_computeInvalid",
          "description": "defines whether the value is set",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 170,
              "column": 6
            },
            "end": {
              "line": 172,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "validate"
            },
            {
              "name": "value"
            },
            {
              "name": "required"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_computeValueIsSet",
          "description": "defines whether the value is set",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 179,
              "column": 6
            },
            "end": {
              "line": 181,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "isSet"
            },
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_valueChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/input-picker-pattern.html",
            "start": {
              "line": 472,
              "column": 6
            },
            "end": {
              "line": 477,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "_defaultChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/input-picker-pattern.html",
            "start": {
              "line": 512,
              "column": 6
            },
            "end": {
              "line": 517,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "def"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "_createReflectPropertyToValueObserver",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 200,
              "column": 6
            },
            "end": {
              "line": 210,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "prop"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_reflectPropertyToValue",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 212,
              "column": 6
            },
            "end": {
              "line": 214,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_reflectValueToProperty",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 216,
              "column": 6
            },
            "end": {
              "line": 218,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "validate",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-picker-pattern.html",
            "start": {
              "line": 417,
              "column": 6
            },
            "end": {
              "line": 424,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "reset",
          "description": "reset confirmedValue and value",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-picker-pattern.html",
            "start": {
              "line": 491,
              "column": 6
            },
            "end": {
              "line": 496,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "Number",
              "description": "value to set"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "disconnectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-picker-pattern.html",
            "start": {
              "line": 291,
              "column": 6
            },
            "end": {
              "line": 295,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "_addPickerTransitionEndListener",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/input-picker-pattern.html",
            "start": {
              "line": 297,
              "column": 6
            },
            "end": {
              "line": 304,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "_removePickerTransitionEndListener",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/input-picker-pattern.html",
            "start": {
              "line": 306,
              "column": 6
            },
            "end": {
              "line": 308,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "_onPickerTransitionEnd",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/input-picker-pattern.html",
            "start": {
              "line": 310,
              "column": 6
            },
            "end": {
              "line": 319,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "_addCancelOnClickListener",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/input-picker-pattern.html",
            "start": {
              "line": 321,
              "column": 6
            },
            "end": {
              "line": 326,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "_removeCancelOnClickListener",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/input-picker-pattern.html",
            "start": {
              "line": 328,
              "column": 6
            },
            "end": {
              "line": 331,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "_addCloseOnPickerOpenedListener",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/input-picker-pattern.html",
            "start": {
              "line": 333,
              "column": 6
            },
            "end": {
              "line": 335,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "_removeCloseOnPickerOpenedListener",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/input-picker-pattern.html",
            "start": {
              "line": 337,
              "column": 6
            },
            "end": {
              "line": 339,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "_stopPropagation",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/input-picker-pattern.html",
            "start": {
              "line": 341,
              "column": 6
            },
            "end": {
              "line": 344,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "_addKeyListener",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/input-picker-pattern.html",
            "start": {
              "line": 346,
              "column": 6
            },
            "end": {
              "line": 348,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "_removeKeyListener",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/input-picker-pattern.html",
            "start": {
              "line": 350,
              "column": 6
            },
            "end": {
              "line": 352,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "_nativeOnMobileChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/input-picker-pattern.html",
            "start": {
              "line": 354,
              "column": 6
            },
            "end": {
              "line": 367,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "_checkKeycode",
          "description": "key press event handler",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/input-picker-pattern.html",
            "start": {
              "line": 373,
              "column": 6
            },
            "end": {
              "line": 389,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "[type]",
              "description": "Event"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "_openedChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/input-picker-pattern.html",
            "start": {
              "line": 391,
              "column": 6
            },
            "end": {
              "line": 415,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "opened"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "close",
          "description": "close the picker",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-picker-pattern.html",
            "start": {
              "line": 436,
              "column": 6
            },
            "end": {
              "line": 438,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "toggle",
          "description": "toggle the picker",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-picker-pattern.html",
            "start": {
              "line": 443,
              "column": 6
            },
            "end": {
              "line": 445,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "confirm",
          "description": "confirms the input",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-picker-pattern.html",
            "start": {
              "line": 450,
              "column": 6
            },
            "end": {
              "line": 455,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "cancel",
          "description": "cancels the input",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/input-picker-pattern.html",
            "start": {
              "line": 461,
              "column": 6
            },
            "end": {
              "line": 470,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "_setConfirmedValue",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/input-picker-pattern.html",
            "start": {
              "line": 498,
              "column": 6
            },
            "end": {
              "line": 500,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "_resetValue",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/input-picker-pattern.html",
            "start": {
              "line": 502,
              "column": 6
            },
            "end": {
              "line": 504,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "_autoConfirmChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/input-picker-pattern.html",
            "start": {
              "line": 506,
              "column": 6
            },
            "end": {
              "line": 510,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "autoConfirm"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/color-picker.html",
          "description": "Color Picker"
        },
        {
          "url": "demo/form.html",
          "description": "In A Form"
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 252,
          "column": 4
        },
        "end": {
          "line": 265,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "ColorPicker",
      "attributes": [
        {
          "name": "property-for-value",
          "description": "defines the property that should be used for the value",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 53,
              "column": 10
            },
            "end": {
              "line": 56,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "name",
          "description": "name of the input",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 38,
              "column": 10
            },
            "end": {
              "line": 40,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "title",
          "description": "description for the element and can be used as a hint for invalid values",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 45,
              "column": 10
            },
            "end": {
              "line": 48,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "value",
          "description": "value of the input",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 61,
              "column": 10
            },
            "end": {
              "line": 65,
              "column": 11
            }
          },
          "metadata": {},
          "type": "Object | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "default",
          "description": "default value of the value, when it does not validate",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 70,
              "column": 10
            },
            "end": {
              "line": 73,
              "column": 11
            }
          },
          "metadata": {},
          "type": "Object | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "disabled",
          "description": "disables the input",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 78,
              "column": 10
            },
            "end": {
              "line": 82,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "invalid",
          "description": "required attribute",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 87,
              "column": 10
            },
            "end": {
              "line": 92,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "required",
          "description": "required attribute",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 97,
              "column": 10
            },
            "end": {
              "line": 102,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "value-is-set",
          "description": "is true when the value is set",
          "sourceRange": {
            "file": "../input-picker-pattern/form-element-mixin.html",
            "start": {
              "line": 107,
              "column": 10
            },
            "end": {
              "line": 111,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "native",
          "description": "Set to `true` to use the native input, if it available",
          "sourceRange": {
            "file": "../input-picker-pattern/input-picker-pattern.html",
            "start": {
              "line": 166,
              "column": 10
            },
            "end": {
              "line": 169,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "native-on-mobile",
          "description": "Set to `true` to use the native input automatically on mobile devices, if it available",
          "sourceRange": {
            "file": "../input-picker-pattern/input-picker-pattern.html",
            "start": {
              "line": 174,
              "column": 10
            },
            "end": {
              "line": 177,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "mobile-user-agent-test-string",
          "description": "When `nativeOnMobile` is set to `true` this string is used to test the userAgent for a mobile device",
          "sourceRange": {
            "file": "../input-picker-pattern/input-picker-pattern.html",
            "start": {
              "line": 182,
              "column": 10
            },
            "end": {
              "line": 186,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "opened",
          "description": "if `true` the picker is opened",
          "sourceRange": {
            "file": "../input-picker-pattern/input-picker-pattern.html",
            "start": {
              "line": 191,
              "column": 10
            },
            "end": {
              "line": 196,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "horizontal-align",
          "description": "The orientation against which to align the element horizontally\nrelative to the related input element. Possible values are \"left\", \"right\", \"center\", \"auto\". (comparable to `iron-fit-behavior` and its `no-overlap`-attribute)",
          "sourceRange": {
            "file": "../input-picker-pattern/input-picker-pattern.html",
            "start": {
              "line": 202,
              "column": 10
            },
            "end": {
              "line": 206,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "vertical-align",
          "description": "The orientation against which to align the element vertically\nrelative to the related input element. Possible values are \"top\", \"bottom\", \"middle\", \"auto\". (comparable to `iron-fit-behavior` and its `no-overlap`-attribute)",
          "sourceRange": {
            "file": "../input-picker-pattern/input-picker-pattern.html",
            "start": {
              "line": 212,
              "column": 10
            },
            "end": {
              "line": 216,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "auto-confirm",
          "description": "Set to `true` to make the input auto-confirming",
          "sourceRange": {
            "file": "../input-picker-pattern/input-picker-pattern.html",
            "start": {
              "line": 221,
              "column": 10
            },
            "end": {
              "line": 224,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "no-cancel-on-esc-key",
          "description": "Set to `true` to disable canceling the overlay with the ESC key.",
          "sourceRange": {
            "file": "../input-picker-pattern/input-picker-pattern.html",
            "start": {
              "line": 229,
              "column": 10
            },
            "end": {
              "line": 232,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "no-cancel-on-outside-click",
          "description": "Set to `true` to disable canceling the dropdown by clicking outside the picker.",
          "sourceRange": {
            "file": "../input-picker-pattern/input-picker-pattern.html",
            "start": {
              "line": 237,
              "column": 10
            },
            "end": {
              "line": 240,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "no-close-on-picker-opened",
          "description": "Set to `true` to disable closing the dropdown when opening another picker.",
          "sourceRange": {
            "file": "../input-picker-pattern/input-picker-pattern.html",
            "start": {
              "line": 245,
              "column": 10
            },
            "end": {
              "line": 248,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "no-tip",
          "description": "Set to `true` to disable the tip of the picker",
          "sourceRange": {
            "file": "../input-picker-pattern/input-picker-pattern.html",
            "start": {
              "line": 253,
              "column": 10
            },
            "end": {
              "line": 256,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "confirmed-value",
          "description": "The confirmed value. When `auto-confirm` is not set, the value will only change, when you confirm.",
          "sourceRange": {
            "file": "../input-picker-pattern/input-picker-pattern.html",
            "start": {
              "line": 261,
              "column": 10
            },
            "end": {
              "line": 264,
              "column": 11
            }
          },
          "metadata": {},
          "type": "Object | null | undefined",
          "inheritedFrom": "InputPickerPattern"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "input-picker-closed",
          "description": "input-picker-closed\nFired after a picker has been closed.",
          "metadata": {},
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "type": "CustomEvent",
          "name": "input-picker-opened",
          "description": "input-picker-opened\nFired when a picker has been opened.",
          "metadata": {},
          "inheritedFrom": "InputPickerPattern"
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "color-picker",
      "mixins": [
        "ColorPickerPattern",
        "ColorElementPattern",
        "ColorInputPattern",
        "ColorTextInputPattern",
        "ColorBadgePattern",
        "ColorFormMixin",
        "InputPickerPattern"
      ]
    },
    {
      "description": "`<overlay-color-picker>` extends `color-picker` in an overlay.\n\n ```html\n   <overlay-color-picker value=\"{{value}}\"></overlay-color-picker>\n ```",
      "summary": "",
      "path": "overlay-color-picker.html",
      "properties": [
        {
          "name": "alwaysOnTop",
          "type": "boolean | null | undefined",
          "description": "Set to true to keep overlay always on top.",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/overlay-picker-mixin.html",
            "start": {
              "line": 21,
              "column": 10
            },
            "end": {
              "line": 23,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "OverlayPickerMixin"
        },
        {
          "name": "noOverlap",
          "type": "boolean | null | undefined",
          "description": "Will position the element around the positionTarget without overlapping it.",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/overlay-picker-mixin.html",
            "start": {
              "line": 27,
              "column": 10
            },
            "end": {
              "line": 30,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "OverlayPickerMixin"
        },
        {
          "name": "withBackdrop",
          "type": "boolean | null | undefined",
          "description": "Set to true to display a backdrop behind the overlay. It traps the focus\nwithin the light DOM of the overlay.",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/overlay-picker-mixin.html",
            "start": {
              "line": 35,
              "column": 10
            },
            "end": {
              "line": 38,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "OverlayPickerMixin"
        },
        {
          "name": "noCancelOnOutsideClick",
          "type": "boolean | null | undefined",
          "description": "Set to true to disable canceling the overlay by clicking outside it.",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/overlay-picker-mixin.html",
            "start": {
              "line": 42,
              "column": 10
            },
            "end": {
              "line": 45,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "OverlayPickerMixin"
        },
        {
          "name": "dynamicAlign",
          "type": "boolean | null | undefined",
          "description": "If true, it will use `horizontalAlign` and `verticalAlign` values as preferred alignment\nand if there's not enough space, it will pick the values which minimize the cropping.",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/overlay-picker-mixin.html",
            "start": {
              "line": 51,
              "column": 10
            },
            "end": {
              "line": 54,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "OverlayPickerMixin"
        },
        {
          "name": "autoFitOnAttach",
          "type": "boolean | null | undefined",
          "description": "Set to true to auto-fit on attach.",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/overlay-picker-mixin.html",
            "start": {
              "line": 59,
              "column": 10
            },
            "end": {
              "line": 62,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "OverlayPickerMixin"
        },
        {
          "name": "fitInto",
          "type": "Object | null | undefined",
          "description": "The element to fit the overlay into. By default it is the window.",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/overlay-picker-mixin.html",
            "start": {
              "line": 67,
              "column": 10
            },
            "end": {
              "line": 69,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "OverlayPickerMixin"
        },
        {
          "name": "positionTarget",
          "type": "Element | null | undefined",
          "description": "The element that should be used to position the overlay. If not set, it will\ndefault to the polyfill node.",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/overlay-picker-mixin.html",
            "start": {
              "line": 75,
              "column": 10
            },
            "end": {
              "line": 77,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Element"
            }
          },
          "inheritedFrom": "OverlayPickerMixin"
        },
        {
          "name": "_sizingTarget",
          "type": "Element | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../input-picker-pattern/overlay-picker-mixin.html",
            "start": {
              "line": 79,
              "column": 10
            },
            "end": {
              "line": 82,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Element"
            }
          },
          "inheritedFrom": "OverlayPickerMixin"
        },
        {
          "name": "propertyForValue",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "color-picker.html",
            "start": {
              "line": 130,
              "column": 10
            },
            "end": {
              "line": 133,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"colorString\"",
          "inheritedFrom": "ColorPickerPattern"
        },
        {
          "name": "_recentcolorheight",
          "type": "number | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "color-picker.html",
            "start": {
              "line": 135,
              "column": 10
            },
            "end": {
              "line": 137,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "ColorPickerPattern"
        },
        {
          "name": "_recentcolorwidth",
          "type": "number | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "color-picker.html",
            "start": {
              "line": 139,
              "column": 10
            },
            "end": {
              "line": 141,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "ColorPickerPattern"
        },
        {
          "name": "_hasNative",
          "type": "?",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 29,
              "column": 6
            },
            "end": {
              "line": 31,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        }
      ],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/overlay-picker-mixin.html",
            "start": {
              "line": 118,
              "column": 6
            },
            "end": {
              "line": 123,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "OverlayPickerMixin"
        },
        {
          "name": "fit",
          "description": "Positions and fits the overlay into the `fitInto` element.",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/overlay-picker-mixin.html",
            "start": {
              "line": 128,
              "column": 6
            },
            "end": {
              "line": 130,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "OverlayPickerMixin"
        },
        {
          "name": "open",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "color-picker.html",
            "start": {
              "line": 199,
              "column": 6
            },
            "end": {
              "line": 204,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorPickerPattern"
        },
        {
          "name": "notifyResize",
          "description": "notify manually the overlay to resize",
          "privacy": "public",
          "sourceRange": {
            "file": "../input-picker-pattern/overlay-picker-mixin.html",
            "start": {
              "line": 140,
              "column": 6
            },
            "end": {
              "line": 142,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "OverlayPickerMixin"
        },
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "color-picker.html",
            "start": {
              "line": 145,
              "column": 6
            },
            "end": {
              "line": 150,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorPickerPattern"
        },
        {
          "name": "redraw",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "color-picker.html",
            "start": {
              "line": 152,
              "column": 6
            },
            "end": {
              "line": 155,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorPickerPattern"
        },
        {
          "name": "_resizeBadge",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "color-picker.html",
            "start": {
              "line": 157,
              "column": 6
            },
            "end": {
              "line": 177,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorPickerPattern"
        },
        {
          "name": "_resetValues",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "color-picker.html",
            "start": {
              "line": 179,
              "column": 6
            },
            "end": {
              "line": 184,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorPickerPattern"
        },
        {
          "name": "_confirmedValueChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "color-picker.html",
            "start": {
              "line": 186,
              "column": 6
            },
            "end": {
              "line": 193,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "confirmedValue"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorPickerPattern"
        },
        {
          "name": "_drawConfimedColorBadge",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "color-picker.html",
            "start": {
              "line": 195,
              "column": 6
            },
            "end": {
              "line": 197,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            },
            {
              "name": "width"
            },
            {
              "name": "height"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorPickerPattern"
        },
        {
          "name": "_onDblClick",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "color-picker.html",
            "start": {
              "line": 206,
              "column": 6
            },
            "end": {
              "line": 208,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorPickerPattern"
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/color-picker.html",
          "description": "Color Picker"
        },
        {
          "url": "demo/form.html",
          "description": "In A Form"
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 23,
          "column": 4
        },
        "end": {
          "line": 32,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "OverlayColorPicker",
      "attributes": [
        {
          "name": "always-on-top",
          "description": "Set to true to keep overlay always on top.",
          "sourceRange": {
            "file": "../input-picker-pattern/overlay-picker-mixin.html",
            "start": {
              "line": 21,
              "column": 10
            },
            "end": {
              "line": 23,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "OverlayPickerMixin"
        },
        {
          "name": "no-overlap",
          "description": "Will position the element around the positionTarget without overlapping it.",
          "sourceRange": {
            "file": "../input-picker-pattern/overlay-picker-mixin.html",
            "start": {
              "line": 27,
              "column": 10
            },
            "end": {
              "line": 30,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "OverlayPickerMixin"
        },
        {
          "name": "with-backdrop",
          "description": "Set to true to display a backdrop behind the overlay. It traps the focus\nwithin the light DOM of the overlay.",
          "sourceRange": {
            "file": "../input-picker-pattern/overlay-picker-mixin.html",
            "start": {
              "line": 35,
              "column": 10
            },
            "end": {
              "line": 38,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "OverlayPickerMixin"
        },
        {
          "name": "no-cancel-on-outside-click",
          "description": "Set to true to disable canceling the overlay by clicking outside it.",
          "sourceRange": {
            "file": "../input-picker-pattern/overlay-picker-mixin.html",
            "start": {
              "line": 42,
              "column": 10
            },
            "end": {
              "line": 45,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "OverlayPickerMixin"
        },
        {
          "name": "dynamic-align",
          "description": "If true, it will use `horizontalAlign` and `verticalAlign` values as preferred alignment\nand if there's not enough space, it will pick the values which minimize the cropping.",
          "sourceRange": {
            "file": "../input-picker-pattern/overlay-picker-mixin.html",
            "start": {
              "line": 51,
              "column": 10
            },
            "end": {
              "line": 54,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "OverlayPickerMixin"
        },
        {
          "name": "auto-fit-on-attach",
          "description": "Set to true to auto-fit on attach.",
          "sourceRange": {
            "file": "../input-picker-pattern/overlay-picker-mixin.html",
            "start": {
              "line": 59,
              "column": 10
            },
            "end": {
              "line": 62,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "OverlayPickerMixin"
        },
        {
          "name": "fit-into",
          "description": "The element to fit the overlay into. By default it is the window.",
          "sourceRange": {
            "file": "../input-picker-pattern/overlay-picker-mixin.html",
            "start": {
              "line": 67,
              "column": 10
            },
            "end": {
              "line": 69,
              "column": 11
            }
          },
          "metadata": {},
          "type": "Object | null | undefined",
          "inheritedFrom": "OverlayPickerMixin"
        },
        {
          "name": "position-target",
          "description": "The element that should be used to position the overlay. If not set, it will\ndefault to the polyfill node.",
          "sourceRange": {
            "file": "../input-picker-pattern/overlay-picker-mixin.html",
            "start": {
              "line": 75,
              "column": 10
            },
            "end": {
              "line": 77,
              "column": 11
            }
          },
          "metadata": {},
          "type": "Element | null | undefined",
          "inheritedFrom": "OverlayPickerMixin"
        },
        {
          "name": "property-for-value",
          "description": "",
          "sourceRange": {
            "file": "color-picker.html",
            "start": {
              "line": 130,
              "column": 10
            },
            "end": {
              "line": 133,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "ColorPickerPattern"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "overlay-color-picker",
      "mixins": [
        "OverlayPickerMixin",
        "ColorPickerPattern"
      ]
    }
  ],
  "mixins": [
    {
      "description": "Mixin for color-picker",
      "summary": "",
      "path": "color-picker.html",
      "properties": [
        {
          "name": "propertyForValue",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 130,
              "column": 10
            },
            "end": {
              "line": 133,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"colorString\""
        },
        {
          "name": "_recentcolorheight",
          "type": "number | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 135,
              "column": 10
            },
            "end": {
              "line": 137,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          }
        },
        {
          "name": "_recentcolorwidth",
          "type": "number | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 139,
              "column": 10
            },
            "end": {
              "line": 141,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 145,
              "column": 6
            },
            "end": {
              "line": 150,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "redraw",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 152,
              "column": 6
            },
            "end": {
              "line": 155,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_resizeBadge",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 157,
              "column": 6
            },
            "end": {
              "line": 177,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_resetValues",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 179,
              "column": 6
            },
            "end": {
              "line": 184,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_confirmedValueChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 186,
              "column": 6
            },
            "end": {
              "line": 193,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "confirmedValue"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_drawConfimedColorBadge",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 195,
              "column": 6
            },
            "end": {
              "line": 197,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            },
            {
              "name": "width"
            },
            {
              "name": "height"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "open",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 199,
              "column": 6
            },
            "end": {
              "line": 204,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_onDblClick",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 206,
              "column": 6
            },
            "end": {
              "line": 208,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 22,
          "column": 2
        },
        "end": {
          "line": 210,
          "column": 3
        }
      },
      "privacy": "public",
      "name": "ColorPickerPattern",
      "attributes": [
        {
          "name": "property-for-value",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 130,
              "column": 10
            },
            "end": {
              "line": 133,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": []
    }
  ]
}
